{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\ssssss\\\\frontend\\\\src\\\\components\\\\GameRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect, useCallback, useMemo, memo, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport GameContext from '../contexts/GameContext';\nimport SocketContext from '../contexts/SocketContext';\nimport GameBoard from './GameBoard';\nimport PlayerInfo from './PlayerInfo';\nimport GameChat from './GameChat';\nimport GameControls from './GameControls';\nimport '../styles/GameRoom.css';\n\n// 게임 단계 상수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GAME_PHASES = {\n  ANIMAL_SELECTION: 'animal_selection',\n  PEEKING: 'peeking',\n  PRE_MOVE_GATHERING: 'pre_move_gathering',\n  MOVEMENT: 'movement',\n  DISCUSSION: 'discussion'\n};\n\n// 각 단계별 제한 시간 (초)\nconst PHASE_TIMES = {\n  [GAME_PHASES.ANIMAL_SELECTION]: 30,\n  [GAME_PHASES.PEEKING]: 30,\n  [GAME_PHASES.PRE_MOVE_GATHERING]: 60,\n  [GAME_PHASES.MOVEMENT]: 30,\n  [GAME_PHASES.DISCUSSION]: 120\n};\n\n// 로딩 컴포넌트를 별도로 분리하고 memo로 최적화\nconst LoadingScreen = /*#__PURE__*/memo(_c = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-room-loading\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-spinner\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uAC8C\\uC784 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 31,\n  columnNumber: 3\n}, this));\n\n// 게임 대기 화면 컴포넌트를 분리하여 최적화\n_c2 = LoadingScreen;\nconst WaitingScreen = /*#__PURE__*/memo(_c3 = ({\n  players,\n  isHost,\n  onStartGame,\n  onLeaveGame,\n  messages,\n  onSendMessage\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-waiting\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-list card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uCC38\\uAC00\\uC790 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: player.isHost ? 'host' : '',\n        children: [player.name, \" \", player.isHost && '(방장)', player.isReady && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ready-badge\",\n          children: \"\\uC900\\uBE44\\uC644\\uB8CC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 32\n        }, this)]\n      }, player.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-actions card\",\n    children: [isHost ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary start-button\",\n      onClick: onStartGame,\n      disabled: players.length < 3,\n      children: \"\\uAC8C\\uC784 \\uC2DC\\uC791\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"primary ready-button\",\n      children: \"\\uC900\\uBE44\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"secondary\",\n      onClick: onLeaveGame,\n      children: \"\\uB098\\uAC00\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-chat-container card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uCC44\\uD305\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n      messages: messages,\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 46,\n  columnNumber: 3\n}, this));\n\n// 게임 플레이 화면 컴포넌트를 분리하여 최적화\n_c4 = WaitingScreen;\nconst PlayingScreen = /*#__PURE__*/memo(_c5 = ({\n  currentRound,\n  currentPhase,\n  phaseTimeLeft,\n  selectedLocation,\n  onLocationSelect,\n  players,\n  selectedAction,\n  targetPlayer,\n  onTargetSelect,\n  playerInfo,\n  onActionSelect,\n  onSubmitTurn,\n  gameStatus,\n  onLeaveGame,\n  messages,\n  onSendMessage,\n  peekCount,\n  maxPeekCount\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-playing\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board-container\",\n    children: /*#__PURE__*/_jsxDEV(GameBoard, {\n      currentRound: currentRound,\n      currentPhase: currentPhase,\n      selectedLocation: selectedLocation,\n      onLocationSelect: onLocationSelect,\n      players: players,\n      selectedAction: selectedAction,\n      targetPlayer: targetPlayer,\n      onTargetSelect: onTargetSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-info-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `phase-timer ${currentPhase ? currentPhase.replace('_', '-') : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: getPhaseDisplayName(currentPhase)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `timer-progress ${phaseTimeLeft < 10 ? 'warning' : ''}`,\n          style: {\n            width: `${phaseTimeLeft / PHASE_TIMES[currentPhase] * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"time-left\",\n        children: formatTime(phaseTimeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"phase-description\",\n        children: [currentPhase === GAME_PHASES.ANIMAL_SELECTION && '30초 동안 자신의 동물을 확인하세요.', currentPhase === GAME_PHASES.PEEKING && '다른 플레이어의 동물을 엿볼 수 있습니다.', currentPhase === GAME_PHASES.PRE_MOVE_GATHERING && '모든 플레이어와 채팅할 수 있습니다.', currentPhase === GAME_PHASES.MOVEMENT && '원하는 지역으로 이동하세요.', currentPhase === GAME_PHASES.DISCUSSION && '같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-info-container\",\n      children: /*#__PURE__*/_jsxDEV(PlayerInfo, {\n        player: playerInfo,\n        currentRound: currentRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-controls-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(GameControls, {\n        currentRound: currentRound,\n        currentPhase: currentPhase,\n        selectedLocation: selectedLocation,\n        selectedAction: selectedAction,\n        targetPlayer: targetPlayer,\n        onActionSelect: onActionSelect,\n        onSubmitTurn: onSubmitTurn,\n        gameStatus: gameStatus,\n        onLeaveGame: onLeaveGame,\n        peekCount: peekCount,\n        maxPeekCount: maxPeekCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-chat-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(GameChat, {\n        messages: messages,\n        onSendMessage: onSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 109,\n  columnNumber: 3\n}, this));\n\n// 단계 이름을 한글로 표시하는 함수\n_c6 = PlayingScreen;\nconst getPhaseDisplayName = phase => {\n  switch (phase) {\n    case GAME_PHASES.ANIMAL_SELECTION:\n      return '동물 선택 단계';\n    case GAME_PHASES.PEEKING:\n      return '엿보기 단계';\n    case GAME_PHASES.PRE_MOVE_GATHERING:\n      return '이동 전 모임 단계';\n    case GAME_PHASES.MOVEMENT:\n      return '이동 단계';\n    case GAME_PHASES.DISCUSSION:\n      return '토론 단계';\n    default:\n      return '게임 진행 중';\n  }\n};\n\n// 시간을 mm:ss 형식으로 포맷팅하는 함수\nconst formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\nconst GameRoom = () => {\n  _s();\n  const {\n    gameId\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    gameState,\n    setGameState\n  } = useContext(GameContext);\n  const {\n    socket\n  } = useContext(SocketContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState(null);\n  const [phaseTimeLeft, setPhaseTimeLeft] = useState(0);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedAction, setSelectedAction] = useState(null);\n  const [targetPlayer, setTargetPlayer] = useState(null);\n  const [peekCount, setPeekCount] = useState(0); // 엿보기 사용 횟수\n  const [maxPeekCount, setMaxPeekCount] = useState(1); // 최대 엿보기 횟수 (기본값 1)\n  const [leftHabitat, setLeftHabitat] = useState(false); // 서식지를 떠났는지 여부\n\n  // 메모이제이션된 플레이어 정보\n  const playerInfo = useMemo(() => {\n    return {\n      name: gameState.playerName,\n      animal: gameState.animal,\n      location: selectedLocation,\n      habitat: gameState.habitat || '숲',\n      // 기본 서식지\n      tier: gameState.tier || 'Tier 5' // 기본 계층\n    };\n  }, [gameState.playerName, gameState.animal, gameState.habitat, gameState.tier, selectedLocation]);\n\n  // 시스템 메시지 추가 함수 최적화\n  const addSystemMessage = useCallback(content => {\n    const systemMessage = {\n      id: Date.now().toString(),\n      sender: 'System',\n      content,\n      timestamp: new Date().toISOString(),\n      isSystem: true\n    };\n    setMessages(prev => [...prev, systemMessage]);\n  }, []);\n\n  // 게임 단계 변경 함수\n  const changeGamePhase = useCallback(newPhase => {\n    console.log('게임 단계 변경:', newPhase);\n\n    // 타이머 초기화 플래그 리셋 - 새 단계에서 타이머가 항상 초기화되도록 함\n    timerInitializedRef.current = false;\n\n    // 상태 업데이트를 배치로 처리하여 리렌더링 최소화\n    setCurrentPhase(newPhase);\n    setPhaseTimeLeft(PHASE_TIMES[newPhase]);\n\n    // 단계별 초기화 및 메시지\n    switch (newPhase) {\n      case GAME_PHASES.ANIMAL_SELECTION:\n        addSystemMessage('동물 선택 단계가 시작되었습니다. 30초 동안 자신의 동물을 확인하세요.');\n        if (gameState.animal === '까마귀') {\n          addSystemMessage('당신은 까마귀입니다. 누가 우승할지 예측하세요.');\n        } else if (gameState.animal === '카멜레온') {\n          addSystemMessage('당신은 카멜레온입니다. 어떤 동물로 변장할지 선택하세요.');\n        }\n        break;\n      case GAME_PHASES.PEEKING:\n        addSystemMessage('엿보기 단계가 시작되었습니다. 다른 플레이어의 동물을 확인할 수 있습니다.');\n        // 특수 동물 능력 설정\n        if (['까마귀', '악어새', '쥐'].includes(gameState.animal)) {\n          setMaxPeekCount(2);\n          addSystemMessage(`당신은 ${gameState.animal}입니다. 2번 엿볼 수 있습니다.`);\n        } else {\n          setMaxPeekCount(1);\n        }\n        break;\n      case GAME_PHASES.PRE_MOVE_GATHERING:\n        addSystemMessage('이동 전 모임 단계가 시작되었습니다. 모든 플레이어와 채팅할 수 있습니다.');\n        break;\n      case GAME_PHASES.MOVEMENT:\n        addSystemMessage('이동 단계가 시작되었습니다. 원하는 지역으로 이동하세요.');\n        break;\n      case GAME_PHASES.DISCUSSION:\n        addSystemMessage('토론 단계가 시작되었습니다. 같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.');\n        break;\n      default:\n        break;\n    }\n  }, [addSystemMessage, gameState.animal]);\n\n  // 타이머 ref 선언 - 컴포넌트 최상위 레벨에서 선언\n  const timerRef = useRef(null);\n  const timerInitializedRef = useRef(false);\n\n  // 타이머 효과 - 의존성 배열 최적화 및 타이머 중복 방지\n  useEffect(() => {\n    // 게임이 시작되지 않았거나 현재 단계가 없으면 타이머를 실행하지 않음\n    if (!currentPhase || !gameStarted) {\n      console.log('타이머 조건 불충족: 게임 시작 =', gameStarted, '현재 단계 =', currentPhase);\n      return;\n    }\n    console.log('타이머 설정: 단계 =', currentPhase, '시간 =', PHASE_TIMES[currentPhase]);\n\n    // 이전 타이머가 있으면 정리\n    if (timerRef.current) {\n      console.log('이전 타이머 정리');\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // 항상 새 단계에서 타이머 시간 초기화\n    console.log('타이머 초기화');\n    setPhaseTimeLeft(PHASE_TIMES[currentPhase]);\n\n    // 새 타이머 설정 (단일 인스턴스만 생성)\n    const timerId = setInterval(() => {\n      setPhaseTimeLeft(prev => {\n        const newTime = prev - 1;\n        if (newTime <= 0) {\n          console.log('타이머 종료, 다음 단계로 진행');\n          clearInterval(timerId);\n\n          // 다음 단계로 자동 진행\n          switch (currentPhase) {\n            case GAME_PHASES.ANIMAL_SELECTION:\n              changeGamePhase(GAME_PHASES.PEEKING);\n              return PHASE_TIMES[GAME_PHASES.PEEKING];\n            case GAME_PHASES.PEEKING:\n              changeGamePhase(GAME_PHASES.PRE_MOVE_GATHERING);\n              return PHASE_TIMES[GAME_PHASES.PRE_MOVE_GATHERING];\n            case GAME_PHASES.PRE_MOVE_GATHERING:\n              changeGamePhase(GAME_PHASES.MOVEMENT);\n              return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n            case GAME_PHASES.MOVEMENT:\n              changeGamePhase(GAME_PHASES.DISCUSSION);\n              return PHASE_TIMES[GAME_PHASES.DISCUSSION];\n            case GAME_PHASES.DISCUSSION:\n              // 다음 라운드로 진행 또는 게임 종료\n              if (currentRound < 4) {\n                setCurrentRound(prev => prev + 1);\n                changeGamePhase(GAME_PHASES.MOVEMENT);\n                return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n              } else {\n                // 게임 종료\n                addSystemMessage('게임이 종료되었습니다!');\n                // 승자 결정 (실제로는 서버에서 처리)\n                const winner = players[Math.floor(Math.random() * players.length)];\n                addSystemMessage(`${winner.name}(${winner.animal})이(가) 승리했습니다!`);\n                setGameState(prev => ({\n                  ...prev,\n                  gameStatus: 'finished'\n                }));\n                return 0;\n              }\n            default:\n              return 0;\n          }\n        }\n        return newTime;\n      });\n    }, 1000);\n\n    // 타이머 ID 저장\n    timerRef.current = timerId;\n\n    // 컴포넌트 언마운트 또는 의존성 변경 시 타이머 정리\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n    // 의존성 배열에 필요한 모든 의존성 포함\n  }, [currentPhase, gameStarted, currentRound, changeGamePhase, addSystemMessage, players]);\n\n  // 게임 시작 핸들러 최적화\n  const handleStartGame = useCallback(() => {\n    // 각 플레이어에게 랜덤 동물 할당 (실제로는 서버에서 처리)\n    const animals = ['사자', '악어', '독수리', '하이에나', '뱀', '카멜레온', '까마귀', '악어새', '사슴', '수달', '청둥오리', '토끼', '쥐'];\n    const habitats = ['강', '하늘', '들', '숲'];\n    const tiers = ['Tier 1', 'Tier 2', 'Tier 3', 'Tier 4', 'Tier 5'];\n    const updatedPlayers = players.map(player => {\n      const animal = animals[Math.floor(Math.random() * animals.length)];\n      const habitat = habitats[Math.floor(Math.random() * habitats.length)];\n      const tier = tiers[Math.floor(Math.random() * tiers.length)];\n      return {\n        ...player,\n        animal,\n        habitat,\n        tier\n      };\n    });\n\n    // 모든 상태 업데이트를 한 번에 처리하여 리렌더링 최소화\n    const myPlayer = updatedPlayers.find(p => p.id === '1');\n\n    // 실제 구현에서는 소켓을 통해 게임 시작 요청을 보냅니다\n    setGameStarted(true);\n    setCurrentRound(1);\n    setPlayers(updatedPlayers);\n\n    // 게임 상태 업데이트\n    setGameState(prev => ({\n      ...prev,\n      players: updatedPlayers,\n      currentRound: 1,\n      gameStatus: 'playing',\n      animal: myPlayer.animal,\n      habitat: myPlayer.habitat,\n      tier: myPlayer.tier\n    }));\n\n    // 시스템 메시지 추가\n    addSystemMessage('게임이 시작되었습니다!');\n    addSystemMessage(`당신의 동물은 ${myPlayer.animal}입니다.`);\n    addSystemMessage(`당신의 서식지는 ${myPlayer.habitat}입니다.`);\n    addSystemMessage(`당신의 계층은 ${myPlayer.tier}입니다.`);\n\n    // 첫 번째 단계 시작\n    changeGamePhase(GAME_PHASES.ANIMAL_SELECTION);\n  }, [addSystemMessage, players, setGameState, changeGamePhase]);\n\n  // 위치 선택 핸들러 최적화\n  const handleLocationSelect = useCallback(location => {\n    // 이동 제한 규칙 적용\n    if (leftHabitat && location !== playerInfo.habitat) {\n      addSystemMessage(`서식지를 한 번 떠난 후에는 반드시 서식지(${playerInfo.habitat})로만 이동해야 합니다.`);\n      return;\n    }\n\n    // 이전 위치와 같은 위치를 선택한 경우 무시\n    if (selectedLocation === location) {\n      return;\n    }\n    setSelectedLocation(location);\n\n    // 서식지를 떠났는지 체크 및 상태 업데이트\n    if (location !== playerInfo.habitat && !leftHabitat) {\n      setLeftHabitat(true);\n      addSystemMessage(`서식지(${playerInfo.habitat})를 떠났습니다. 이후에는 반드시 서식지로만 이동할 수 있습니다.`);\n    }\n\n    // 서식지로 돌아온 경우 특별 메시지\n    if (location === playerInfo.habitat && leftHabitat) {\n      addSystemMessage(`서식지(${playerInfo.habitat})로 돌아왔습니다.`);\n    } else {\n      addSystemMessage(`${location}(으)로 이동했습니다.`);\n    }\n\n    // 이동 정보를 게임 상태에 반영\n    setGameState(prev => ({\n      ...prev,\n      location: location\n    }));\n  }, [addSystemMessage, leftHabitat, playerInfo.habitat, selectedLocation, setGameState]);\n\n  // 액션 선택 핸들러 최적화\n  const handleActionSelect = useCallback(action => {\n    // 현재 게임 단계에 따른 액션 제한\n    if (action === 'peek' && currentPhase !== GAME_PHASES.PEEKING) {\n      addSystemMessage('엿보기는 엿보기 단계에서만 가능합니다.');\n      return;\n    }\n    if (action === 'peek' && peekCount >= maxPeekCount) {\n      addSystemMessage(`엿보기를 이미 ${maxPeekCount}번 사용했습니다.`);\n      return;\n    }\n    if (action === 'move' && currentPhase !== GAME_PHASES.MOVEMENT) {\n      addSystemMessage('이동은 이동 단계에서만 가능합니다.');\n      return;\n    }\n    if (action === 'attack' && currentPhase !== GAME_PHASES.DISCUSSION) {\n      addSystemMessage('공격은 토론 단계에서만 가능합니다.');\n      return;\n    }\n\n    // 상태 업데이트를 함수형으로 처리하여 최신 상태 보장\n    setSelectedAction(prevAction => {\n      // 같은 액션을 다시 선택한 경우 상태 변경 없음\n      if (prevAction === action) return prevAction;\n\n      // 이동 액션인 경우 위치 선택 초기화\n      if (action === 'move') {\n        setSelectedLocation(null);\n      }\n\n      // 공격이나 엿보기 액션인 경우 타겟 플레이어 초기화\n      if (action === 'attack' || action === 'peek') {\n        setTargetPlayer(null);\n      }\n      return action;\n    });\n  }, [addSystemMessage, currentPhase, peekCount, maxPeekCount]);\n\n  // 타겟 선택 핸들러 최적화\n  const handleTargetSelect = useCallback(player => {\n    if (!player) return; // null 체크 추가\n\n    setTargetPlayer(prevTarget => {\n      // 같은 타겟을 다시 선택한 경우 상태 변경 없음\n      if (prevTarget && prevTarget.id === player.id) return prevTarget;\n\n      // 엿보기 액션인 경우 엿보기 카운트 증가\n      if (selectedAction === 'peek') {\n        setPeekCount(prev => prev + 1);\n\n        // 엿본 플레이어의 동물 정보 표시\n        addSystemMessage(`${player.name}의 동물은 ${player.animal}입니다.`);\n        addSystemMessage(`${player.name}의 서식지는 ${player.habitat}입니다.`);\n      }\n      return player;\n    });\n  }, [selectedAction, addSystemMessage]);\n\n  // 턴 제출 핸들러 최적화\n  const handleSubmitTurn = useCallback(() => {\n    // 액션 유효성 검사\n    if (!selectedAction) {\n      addSystemMessage('액션을 선택해주세요.');\n      return;\n    }\n\n    // 액션별 추가 검증\n    if (selectedAction === 'move' && !selectedLocation) {\n      addSystemMessage('이동할 위치를 선택해주세요.');\n      return;\n    }\n    if ((selectedAction === 'attack' || selectedAction === 'peek') && !targetPlayer) {\n      addSystemMessage('대상 플레이어를 선택해주세요.');\n      return;\n    }\n\n    // 액션 처리 (실제로는 서버에 전송)\n    switch (selectedAction) {\n      case 'move':\n        addSystemMessage(`${selectedLocation}(으)로 이동했습니다.`);\n        break;\n      case 'attack':\n        // 공격 성공 여부 랜덤 결정 (실제로는 서버에서 처리)\n        const isSuccess = Math.random() > 0.3;\n        if (isSuccess) {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했습니다!`);\n          // 특수 동물 능력 처리 (예: 사슴)\n          if (targetPlayer.animal === '사슴') {\n            addSystemMessage(`${targetPlayer.name}은(는) 사슴입니다! 공격이 실패하고 당신이 피해를 입었습니다.`);\n          } else {\n            addSystemMessage(`${targetPlayer.name}에게 피해를 입혔습니다.`);\n          }\n        } else {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했지만 실패했습니다.`);\n        }\n        break;\n      case 'peek':\n        // 이미 handleTargetSelect에서 처리됨\n        break;\n      default:\n        break;\n    }\n\n    // 액션 초기화\n    setSelectedAction(null);\n    setTargetPlayer(null);\n  }, [selectedAction, selectedLocation, targetPlayer, addSystemMessage]);\n\n  // 게임 나가기 핸들러\n  const handleLeaveGame = useCallback(() => {\n    // 실제 구현에서는 소켓을 통해 게임 나가기 요청을 보냅니다\n    navigate('/lobby');\n  }, [navigate]);\n\n  // 메시지 전송 핸들러\n  const handleSendMessage = useCallback(content => {\n    const newMessage = {\n      id: Date.now().toString(),\n      sender: gameState.playerName,\n      content,\n      timestamp: new Date().toISOString()\n    };\n\n    // 실제 구현에서는 소켓을 통해 메시지를 전송합니다\n    setMessages(prev => [...prev, newMessage]);\n  }, [gameState.playerName]);\n\n  // 컴포넌트 마운트 시 게임 정보 로드\n  useEffect(() => {\n    // 실제 구현에서는 소켓을 통해 게임 정보를 요청합니다\n    setTimeout(() => {\n      // 임시 데이터\n      const dummyPlayers = [{\n        id: '1',\n        name: gameState.playerName || '플레이어1',\n        isHost: true,\n        isReady: true\n      }, {\n        id: '2',\n        name: '플레이어2',\n        isHost: false,\n        isReady: true\n      }, {\n        id: '3',\n        name: '플레이어3',\n        isHost: false,\n        isReady: false\n      }];\n      setPlayers(dummyPlayers);\n      setIsLoading(false);\n    }, 1000);\n  }, [gameState.playerName]);\n\n  // 로딩 중이면 로딩 화면 표시\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-room-title\",\n      children: [\"\\uAC8C\\uC784 \\uBC29: \", gameId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(WaitingScreen, {\n      players: players,\n      isHost: true // 실제로는 플레이어 ID로 확인\n      ,\n      onStartGame: handleStartGame,\n      onLeaveGame: handleLeaveGame,\n      messages: messages,\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PlayingScreen, {\n      currentRound: currentRound,\n      currentPhase: currentPhase,\n      phaseTimeLeft: phaseTimeLeft,\n      selectedLocation: selectedLocation,\n      onLocationSelect: handleLocationSelect,\n      players: players,\n      selectedAction: selectedAction,\n      targetPlayer: targetPlayer,\n      onTargetSelect: handleTargetSelect,\n      playerInfo: playerInfo,\n      onActionSelect: handleActionSelect,\n      onSubmitTurn: handleSubmitTurn,\n      gameStatus: gameState.gameStatus,\n      onLeaveGame: handleLeaveGame,\n      messages: messages,\n      onSendMessage: handleSendMessage,\n      peekCount: peekCount,\n      maxPeekCount: maxPeekCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n};\n_s(GameRoom, \"YD97wme1rthy58gkGCOvm1haekI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c7 = GameRoom;\nexport default GameRoom;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"LoadingScreen$memo\");\n$RefreshReg$(_c2, \"LoadingScreen\");\n$RefreshReg$(_c3, \"WaitingScreen$memo\");\n$RefreshReg$(_c4, \"WaitingScreen\");\n$RefreshReg$(_c5, \"PlayingScreen$memo\");\n$RefreshReg$(_c6, \"PlayingScreen\");\n$RefreshReg$(_c7, \"GameRoom\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","useMemo","memo","useRef","useParams","useNavigate","GameContext","SocketContext","GameBoard","PlayerInfo","GameChat","GameControls","jsxDEV","_jsxDEV","GAME_PHASES","ANIMAL_SELECTION","PEEKING","PRE_MOVE_GATHERING","MOVEMENT","DISCUSSION","PHASE_TIMES","LoadingScreen","_c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","WaitingScreen","_c3","players","isHost","onStartGame","onLeaveGame","messages","onSendMessage","map","player","name","isReady","id","onClick","disabled","length","_c4","PlayingScreen","_c5","currentRound","currentPhase","phaseTimeLeft","selectedLocation","onLocationSelect","selectedAction","targetPlayer","onTargetSelect","playerInfo","onActionSelect","onSubmitTurn","gameStatus","peekCount","maxPeekCount","replace","getPhaseDisplayName","style","width","formatTime","_c6","phase","seconds","mins","Math","floor","secs","toString","padStart","GameRoom","_s","gameId","navigate","gameState","setGameState","socket","isLoading","setIsLoading","gameStarted","setGameStarted","setPlayers","setMessages","setCurrentRound","setCurrentPhase","setPhaseTimeLeft","setSelectedLocation","setSelectedAction","setTargetPlayer","setPeekCount","setMaxPeekCount","leftHabitat","setLeftHabitat","playerName","animal","location","habitat","tier","addSystemMessage","content","systemMessage","Date","now","sender","timestamp","toISOString","isSystem","prev","changeGamePhase","newPhase","console","log","timerInitializedRef","current","includes","timerRef","clearInterval","timerId","setInterval","newTime","winner","random","handleStartGame","animals","habitats","tiers","updatedPlayers","myPlayer","find","p","handleLocationSelect","handleActionSelect","action","prevAction","handleTargetSelect","prevTarget","handleSubmitTurn","isSuccess","handleLeaveGame","handleSendMessage","newMessage","setTimeout","dummyPlayers","_c7","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/ssssss/frontend/src/components/GameRoom.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useCallback, useMemo, memo, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport GameContext from '../contexts/GameContext';\nimport SocketContext from '../contexts/SocketContext';\nimport GameBoard from './GameBoard';\nimport PlayerInfo from './PlayerInfo';\nimport GameChat from './GameChat';\nimport GameControls from './GameControls';\nimport '../styles/GameRoom.css';\n\n// 게임 단계 상수\nconst GAME_PHASES = {\n  ANIMAL_SELECTION: 'animal_selection',\n  PEEKING: 'peeking',\n  PRE_MOVE_GATHERING: 'pre_move_gathering',\n  MOVEMENT: 'movement',\n  DISCUSSION: 'discussion'\n};\n\n// 각 단계별 제한 시간 (초)\nconst PHASE_TIMES = {\n  [GAME_PHASES.ANIMAL_SELECTION]: 30,\n  [GAME_PHASES.PEEKING]: 30,\n  [GAME_PHASES.PRE_MOVE_GATHERING]: 60,\n  [GAME_PHASES.MOVEMENT]: 30,\n  [GAME_PHASES.DISCUSSION]: 120\n};\n\n// 로딩 컴포넌트를 별도로 분리하고 memo로 최적화\nconst LoadingScreen = memo(() => (\n  <div className=\"game-room-loading\">\n    <div className=\"loading-spinner\"></div>\n    <p>게임 정보를 불러오는 중...</p>\n  </div>\n));\n\n// 게임 대기 화면 컴포넌트를 분리하여 최적화\nconst WaitingScreen = memo(({ \n  players, \n  isHost, \n  onStartGame, \n  onLeaveGame, \n  messages, \n  onSendMessage \n}) => (\n  <div className=\"game-waiting\">\n    <div className=\"player-list card\">\n      <h2>참가자 목록</h2>\n      <ul>\n        {players.map(player => (\n          <li key={player.id} className={player.isHost ? 'host' : ''}>\n            {player.name} {player.isHost && '(방장)'} \n            {player.isReady && <span className=\"ready-badge\">준비완료</span>}\n          </li>\n        ))}\n      </ul>\n    </div>\n    \n    <div className=\"game-actions card\">\n      {isHost ? (\n        <button \n          className=\"primary start-button\"\n          onClick={onStartGame}\n          disabled={players.length < 3}\n        >\n          게임 시작\n        </button>\n      ) : (\n        <button className=\"primary ready-button\">\n          준비하기\n        </button>\n      )}\n      <button className=\"secondary\" onClick={onLeaveGame}>\n        나가기\n      </button>\n    </div>\n    \n    <div className=\"game-chat-container card\">\n      <h2>채팅</h2>\n      <GameChat \n        messages={messages}\n        onSendMessage={onSendMessage}\n      />\n    </div>\n  </div>\n));\n\n// 게임 플레이 화면 컴포넌트를 분리하여 최적화\nconst PlayingScreen = memo(({ \n  currentRound,\n  currentPhase,\n  phaseTimeLeft,\n  selectedLocation,\n  onLocationSelect,\n  players,\n  selectedAction,\n  targetPlayer,\n  onTargetSelect,\n  playerInfo,\n  onActionSelect,\n  onSubmitTurn,\n  gameStatus,\n  onLeaveGame,\n  messages,\n  onSendMessage,\n  peekCount,\n  maxPeekCount\n}) => (\n  <div className=\"game-playing\">\n    {/* 게임 보드를 상단에 배치 */}\n    <div className=\"game-board-container\">\n      <GameBoard \n        currentRound={currentRound}\n        currentPhase={currentPhase}\n        selectedLocation={selectedLocation}\n        onLocationSelect={onLocationSelect}\n        players={players}\n        selectedAction={selectedAction}\n        targetPlayer={targetPlayer}\n        onTargetSelect={onTargetSelect}\n      />\n    </div>\n    \n    {/* 타이머와 플레이어 정보 */}\n    <div className=\"game-info-container\">\n      <div className={`phase-timer ${currentPhase ? currentPhase.replace('_', '-') : ''}`}>\n        <h3>{getPhaseDisplayName(currentPhase)}</h3>\n        <div className=\"timer-bar\">\n          <div \n            className={`timer-progress ${phaseTimeLeft < 10 ? 'warning' : ''}`}\n            style={{ width: `${(phaseTimeLeft / PHASE_TIMES[currentPhase]) * 100}%` }}\n          ></div>\n        </div>\n        <p className=\"time-left\">{formatTime(phaseTimeLeft)}</p>\n        <p className=\"phase-description\">\n          {currentPhase === GAME_PHASES.ANIMAL_SELECTION && '30초 동안 자신의 동물을 확인하세요.'}\n          {currentPhase === GAME_PHASES.PEEKING && '다른 플레이어의 동물을 엿볼 수 있습니다.'}\n          {currentPhase === GAME_PHASES.PRE_MOVE_GATHERING && '모든 플레이어와 채팅할 수 있습니다.'}\n          {currentPhase === GAME_PHASES.MOVEMENT && '원하는 지역으로 이동하세요.'}\n          {currentPhase === GAME_PHASES.DISCUSSION && '같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.'}\n        </p>\n      </div>\n      \n      {/* 플레이어 정보 컴포넌트 - key 제거하여 불필요한 리렌더링 방지 */}\n      <div className=\"player-info-container\">\n        <PlayerInfo \n          player={playerInfo}\n          currentRound={currentRound}\n        />\n      </div>\n    </div>\n    \n    {/* 게임 컨트롤과 채팅을 하단에 나란히 배치 */}\n    <div className=\"game-controls-chat-container\">\n      <div className=\"game-controls-wrapper\">\n        <GameControls \n          currentRound={currentRound}\n          currentPhase={currentPhase}\n          selectedLocation={selectedLocation}\n          selectedAction={selectedAction}\n          targetPlayer={targetPlayer}\n          onActionSelect={onActionSelect}\n          onSubmitTurn={onSubmitTurn}\n          gameStatus={gameStatus}\n          onLeaveGame={onLeaveGame}\n          peekCount={peekCount}\n          maxPeekCount={maxPeekCount}\n        />\n      </div>\n      \n      <div className=\"game-chat-wrapper\">\n        <GameChat \n          messages={messages}\n          onSendMessage={onSendMessage}\n        />\n      </div>\n    </div>\n  </div>\n));\n\n// 단계 이름을 한글로 표시하는 함수\nconst getPhaseDisplayName = (phase) => {\n  switch(phase) {\n    case GAME_PHASES.ANIMAL_SELECTION:\n      return '동물 선택 단계';\n    case GAME_PHASES.PEEKING:\n      return '엿보기 단계';\n    case GAME_PHASES.PRE_MOVE_GATHERING:\n      return '이동 전 모임 단계';\n    case GAME_PHASES.MOVEMENT:\n      return '이동 단계';\n    case GAME_PHASES.DISCUSSION:\n      return '토론 단계';\n    default:\n      return '게임 진행 중';\n  }\n};\n\n// 시간을 mm:ss 형식으로 포맷팅하는 함수\nconst formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n\nconst GameRoom = () => {\n  const { gameId } = useParams();\n  const navigate = useNavigate();\n  const { gameState, setGameState } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState(null);\n  const [phaseTimeLeft, setPhaseTimeLeft] = useState(0);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedAction, setSelectedAction] = useState(null);\n  const [targetPlayer, setTargetPlayer] = useState(null);\n  const [peekCount, setPeekCount] = useState(0); // 엿보기 사용 횟수\n  const [maxPeekCount, setMaxPeekCount] = useState(1); // 최대 엿보기 횟수 (기본값 1)\n  const [leftHabitat, setLeftHabitat] = useState(false); // 서식지를 떠났는지 여부\n  \n  // 메모이제이션된 플레이어 정보\n  const playerInfo = useMemo(() => {\n    return {\n      name: gameState.playerName,\n      animal: gameState.animal,\n      location: selectedLocation,\n      habitat: gameState.habitat || '숲', // 기본 서식지\n      tier: gameState.tier || 'Tier 5' // 기본 계층\n    };\n  }, [gameState.playerName, gameState.animal, gameState.habitat, gameState.tier, selectedLocation]);\n\n  // 시스템 메시지 추가 함수 최적화\n  const addSystemMessage = useCallback((content) => {\n    const systemMessage = {\n      id: Date.now().toString(),\n      sender: 'System',\n      content,\n      timestamp: new Date().toISOString(),\n      isSystem: true\n    };\n    \n    setMessages(prev => [...prev, systemMessage]);\n  }, []);\n  \n  // 게임 단계 변경 함수\n  const changeGamePhase = useCallback((newPhase) => {\n    console.log('게임 단계 변경:', newPhase);\n    \n    // 타이머 초기화 플래그 리셋 - 새 단계에서 타이머가 항상 초기화되도록 함\n    timerInitializedRef.current = false;\n    \n    // 상태 업데이트를 배치로 처리하여 리렌더링 최소화\n    setCurrentPhase(newPhase);\n    setPhaseTimeLeft(PHASE_TIMES[newPhase]);\n    \n    // 단계별 초기화 및 메시지\n    switch(newPhase) {\n      case GAME_PHASES.ANIMAL_SELECTION:\n        addSystemMessage('동물 선택 단계가 시작되었습니다. 30초 동안 자신의 동물을 확인하세요.');\n        if (gameState.animal === '까마귀') {\n          addSystemMessage('당신은 까마귀입니다. 누가 우승할지 예측하세요.');\n        } else if (gameState.animal === '카멜레온') {\n          addSystemMessage('당신은 카멜레온입니다. 어떤 동물로 변장할지 선택하세요.');\n        }\n        break;\n      case GAME_PHASES.PEEKING:\n        addSystemMessage('엿보기 단계가 시작되었습니다. 다른 플레이어의 동물을 확인할 수 있습니다.');\n        // 특수 동물 능력 설정\n        if (['까마귀', '악어새', '쥐'].includes(gameState.animal)) {\n          setMaxPeekCount(2);\n          addSystemMessage(`당신은 ${gameState.animal}입니다. 2번 엿볼 수 있습니다.`);\n        } else {\n          setMaxPeekCount(1);\n        }\n        break;\n      case GAME_PHASES.PRE_MOVE_GATHERING:\n        addSystemMessage('이동 전 모임 단계가 시작되었습니다. 모든 플레이어와 채팅할 수 있습니다.');\n        break;\n      case GAME_PHASES.MOVEMENT:\n        addSystemMessage('이동 단계가 시작되었습니다. 원하는 지역으로 이동하세요.');\n        break;\n      case GAME_PHASES.DISCUSSION:\n        addSystemMessage('토론 단계가 시작되었습니다. 같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.');\n        break;\n      default:\n        break;\n    }\n  }, [addSystemMessage, gameState.animal]);\n  \n  // 타이머 ref 선언 - 컴포넌트 최상위 레벨에서 선언\n  const timerRef = useRef(null);\n  const timerInitializedRef = useRef(false);\n  \n  // 타이머 효과 - 의존성 배열 최적화 및 타이머 중복 방지\n  useEffect(() => {\n    // 게임이 시작되지 않았거나 현재 단계가 없으면 타이머를 실행하지 않음\n    if (!currentPhase || !gameStarted) {\n      console.log('타이머 조건 불충족: 게임 시작 =', gameStarted, '현재 단계 =', currentPhase);\n      return;\n    }\n    \n    console.log('타이머 설정: 단계 =', currentPhase, '시간 =', PHASE_TIMES[currentPhase]);\n    \n    // 이전 타이머가 있으면 정리\n    if (timerRef.current) {\n      console.log('이전 타이머 정리');\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    \n    // 항상 새 단계에서 타이머 시간 초기화\n    console.log('타이머 초기화');\n    setPhaseTimeLeft(PHASE_TIMES[currentPhase]);\n    \n    // 새 타이머 설정 (단일 인스턴스만 생성)\n    const timerId = setInterval(() => {\n      setPhaseTimeLeft(prev => {\n        const newTime = prev - 1;\n        \n        if (newTime <= 0) {\n          console.log('타이머 종료, 다음 단계로 진행');\n          clearInterval(timerId);\n          \n          // 다음 단계로 자동 진행\n          switch(currentPhase) {\n            case GAME_PHASES.ANIMAL_SELECTION:\n              changeGamePhase(GAME_PHASES.PEEKING);\n              return PHASE_TIMES[GAME_PHASES.PEEKING];\n            case GAME_PHASES.PEEKING:\n              changeGamePhase(GAME_PHASES.PRE_MOVE_GATHERING);\n              return PHASE_TIMES[GAME_PHASES.PRE_MOVE_GATHERING];\n            case GAME_PHASES.PRE_MOVE_GATHERING:\n              changeGamePhase(GAME_PHASES.MOVEMENT);\n              return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n            case GAME_PHASES.MOVEMENT:\n              changeGamePhase(GAME_PHASES.DISCUSSION);\n              return PHASE_TIMES[GAME_PHASES.DISCUSSION];\n            case GAME_PHASES.DISCUSSION:\n              // 다음 라운드로 진행 또는 게임 종료\n              if (currentRound < 4) {\n                setCurrentRound(prev => prev + 1);\n                changeGamePhase(GAME_PHASES.MOVEMENT);\n                return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n              } else {\n                // 게임 종료\n                addSystemMessage('게임이 종료되었습니다!');\n                // 승자 결정 (실제로는 서버에서 처리)\n                const winner = players[Math.floor(Math.random() * players.length)];\n                addSystemMessage(`${winner.name}(${winner.animal})이(가) 승리했습니다!`);\n                setGameState(prev => ({\n                  ...prev,\n                  gameStatus: 'finished'\n                }));\n                return 0;\n              }\n            default:\n              return 0;\n          }\n        }\n        return newTime;\n      });\n    }, 1000);\n    \n    // 타이머 ID 저장\n    timerRef.current = timerId;\n    \n    // 컴포넌트 언마운트 또는 의존성 변경 시 타이머 정리\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  // 의존성 배열에 필요한 모든 의존성 포함\n  }, [currentPhase, gameStarted, currentRound, changeGamePhase, addSystemMessage, players]);\n  \n  // 게임 시작 핸들러 최적화\n  const handleStartGame = useCallback(() => {\n    // 각 플레이어에게 랜덤 동물 할당 (실제로는 서버에서 처리)\n    const animals = ['사자', '악어', '독수리', '하이에나', '뱀', '카멜레온', '까마귀', '악어새', '사슴', '수달', '청둥오리', '토끼', '쥐'];\n    const habitats = ['강', '하늘', '들', '숲'];\n    const tiers = ['Tier 1', 'Tier 2', 'Tier 3', 'Tier 4', 'Tier 5'];\n    \n    const updatedPlayers = players.map(player => {\n      const animal = animals[Math.floor(Math.random() * animals.length)];\n      const habitat = habitats[Math.floor(Math.random() * habitats.length)];\n      const tier = tiers[Math.floor(Math.random() * tiers.length)];\n      \n      return {\n        ...player,\n        animal,\n        habitat,\n        tier\n      };\n    });\n    \n    // 모든 상태 업데이트를 한 번에 처리하여 리렌더링 최소화\n    const myPlayer = updatedPlayers.find(p => p.id === '1');\n    \n    // 실제 구현에서는 소켓을 통해 게임 시작 요청을 보냅니다\n    setGameStarted(true);\n    setCurrentRound(1);\n    setPlayers(updatedPlayers);\n    \n    // 게임 상태 업데이트\n    setGameState(prev => ({\n      ...prev,\n      players: updatedPlayers,\n      currentRound: 1,\n      gameStatus: 'playing',\n      animal: myPlayer.animal,\n      habitat: myPlayer.habitat,\n      tier: myPlayer.tier\n    }));\n    \n    // 시스템 메시지 추가\n    addSystemMessage('게임이 시작되었습니다!');\n    addSystemMessage(`당신의 동물은 ${myPlayer.animal}입니다.`);\n    addSystemMessage(`당신의 서식지는 ${myPlayer.habitat}입니다.`);\n    addSystemMessage(`당신의 계층은 ${myPlayer.tier}입니다.`);\n    \n    // 첫 번째 단계 시작\n    changeGamePhase(GAME_PHASES.ANIMAL_SELECTION);\n    \n  }, [addSystemMessage, players, setGameState, changeGamePhase]);\n  \n  // 위치 선택 핸들러 최적화\n  const handleLocationSelect = useCallback((location) => {\n    // 이동 제한 규칙 적용\n    if (leftHabitat && location !== playerInfo.habitat) {\n      addSystemMessage(`서식지를 한 번 떠난 후에는 반드시 서식지(${playerInfo.habitat})로만 이동해야 합니다.`);\n      return;\n    }\n    \n    // 이전 위치와 같은 위치를 선택한 경우 무시\n    if (selectedLocation === location) {\n      return;\n    }\n    \n    setSelectedLocation(location);\n    \n    // 서식지를 떠났는지 체크 및 상태 업데이트\n    if (location !== playerInfo.habitat && !leftHabitat) {\n      setLeftHabitat(true);\n      addSystemMessage(`서식지(${playerInfo.habitat})를 떠났습니다. 이후에는 반드시 서식지로만 이동할 수 있습니다.`);\n    }\n    \n    // 서식지로 돌아온 경우 특별 메시지\n    if (location === playerInfo.habitat && leftHabitat) {\n      addSystemMessage(`서식지(${playerInfo.habitat})로 돌아왔습니다.`);\n    } else {\n      addSystemMessage(`${location}(으)로 이동했습니다.`);\n    }\n    \n    // 이동 정보를 게임 상태에 반영\n    setGameState(prev => ({\n      ...prev,\n      location: location\n    }));\n  }, [addSystemMessage, leftHabitat, playerInfo.habitat, selectedLocation, setGameState]);\n  \n  // 액션 선택 핸들러 최적화\n  const handleActionSelect = useCallback((action) => {\n    // 현재 게임 단계에 따른 액션 제한\n    if (action === 'peek' && currentPhase !== GAME_PHASES.PEEKING) {\n      addSystemMessage('엿보기는 엿보기 단계에서만 가능합니다.');\n      return;\n    }\n    \n    if (action === 'peek' && peekCount >= maxPeekCount) {\n      addSystemMessage(`엿보기를 이미 ${maxPeekCount}번 사용했습니다.`);\n      return;\n    }\n    \n    if (action === 'move' && currentPhase !== GAME_PHASES.MOVEMENT) {\n      addSystemMessage('이동은 이동 단계에서만 가능합니다.');\n      return;\n    }\n    \n    if (action === 'attack' && currentPhase !== GAME_PHASES.DISCUSSION) {\n      addSystemMessage('공격은 토론 단계에서만 가능합니다.');\n      return;\n    }\n    \n    // 상태 업데이트를 함수형으로 처리하여 최신 상태 보장\n    setSelectedAction(prevAction => {\n      // 같은 액션을 다시 선택한 경우 상태 변경 없음\n      if (prevAction === action) return prevAction;\n      \n      // 이동 액션인 경우 위치 선택 초기화\n      if (action === 'move') {\n        setSelectedLocation(null);\n      }\n      \n      // 공격이나 엿보기 액션인 경우 타겟 플레이어 초기화\n      if (action === 'attack' || action === 'peek') {\n        setTargetPlayer(null);\n      }\n      \n      return action;\n    });\n  }, [addSystemMessage, currentPhase, peekCount, maxPeekCount]);\n  \n  // 타겟 선택 핸들러 최적화\n  const handleTargetSelect = useCallback((player) => {\n    if (!player) return; // null 체크 추가\n    \n    setTargetPlayer(prevTarget => {\n      // 같은 타겟을 다시 선택한 경우 상태 변경 없음\n      if (prevTarget && prevTarget.id === player.id) return prevTarget;\n      \n      // 엿보기 액션인 경우 엿보기 카운트 증가\n      if (selectedAction === 'peek') {\n        setPeekCount(prev => prev + 1);\n        \n        // 엿본 플레이어의 동물 정보 표시\n        addSystemMessage(`${player.name}의 동물은 ${player.animal}입니다.`);\n        addSystemMessage(`${player.name}의 서식지는 ${player.habitat}입니다.`);\n      }\n      \n      return player;\n    });\n  }, [selectedAction, addSystemMessage]);\n  \n  // 턴 제출 핸들러 최적화\n  const handleSubmitTurn = useCallback(() => {\n    // 액션 유효성 검사\n    if (!selectedAction) {\n      addSystemMessage('액션을 선택해주세요.');\n      return;\n    }\n    \n    // 액션별 추가 검증\n    if (selectedAction === 'move' && !selectedLocation) {\n      addSystemMessage('이동할 위치를 선택해주세요.');\n      return;\n    }\n    \n    if ((selectedAction === 'attack' || selectedAction === 'peek') && !targetPlayer) {\n      addSystemMessage('대상 플레이어를 선택해주세요.');\n      return;\n    }\n    \n    // 액션 처리 (실제로는 서버에 전송)\n    switch(selectedAction) {\n      case 'move':\n        addSystemMessage(`${selectedLocation}(으)로 이동했습니다.`);\n        break;\n      case 'attack':\n        // 공격 성공 여부 랜덤 결정 (실제로는 서버에서 처리)\n        const isSuccess = Math.random() > 0.3;\n        \n        if (isSuccess) {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했습니다!`);\n          // 특수 동물 능력 처리 (예: 사슴)\n          if (targetPlayer.animal === '사슴') {\n            addSystemMessage(`${targetPlayer.name}은(는) 사슴입니다! 공격이 실패하고 당신이 피해를 입었습니다.`);\n          } else {\n            addSystemMessage(`${targetPlayer.name}에게 피해를 입혔습니다.`);\n          }\n        } else {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했지만 실패했습니다.`);\n        }\n        break;\n      case 'peek':\n        // 이미 handleTargetSelect에서 처리됨\n        break;\n      default:\n        break;\n    }\n    \n    // 액션 초기화\n    setSelectedAction(null);\n    setTargetPlayer(null);\n  }, [selectedAction, selectedLocation, targetPlayer, addSystemMessage]);\n  \n  // 게임 나가기 핸들러\n  const handleLeaveGame = useCallback(() => {\n    // 실제 구현에서는 소켓을 통해 게임 나가기 요청을 보냅니다\n    navigate('/lobby');\n  }, [navigate]);\n  \n  // 메시지 전송 핸들러\n  const handleSendMessage = useCallback((content) => {\n    const newMessage = {\n      id: Date.now().toString(),\n      sender: gameState.playerName,\n      content,\n      timestamp: new Date().toISOString()\n    };\n    \n    // 실제 구현에서는 소켓을 통해 메시지를 전송합니다\n    setMessages(prev => [...prev, newMessage]);\n  }, [gameState.playerName]);\n  \n  // 컴포넌트 마운트 시 게임 정보 로드\n  useEffect(() => {\n    // 실제 구현에서는 소켓을 통해 게임 정보를 요청합니다\n    setTimeout(() => {\n      // 임시 데이터\n      const dummyPlayers = [\n        { id: '1', name: gameState.playerName || '플레이어1', isHost: true, isReady: true },\n        { id: '2', name: '플레이어2', isHost: false, isReady: true },\n        { id: '3', name: '플레이어3', isHost: false, isReady: false }\n      ];\n      \n      setPlayers(dummyPlayers);\n      setIsLoading(false);\n    }, 1000);\n  }, [gameState.playerName]);\n  \n  // 로딩 중이면 로딩 화면 표시\n  if (isLoading) {\n    return <LoadingScreen />;\n  }\n  \n  return (\n    <div className=\"game-room\">\n      <h1 className=\"game-room-title\">게임 방: {gameId}</h1>\n      \n      {!gameStarted ? (\n        <WaitingScreen \n          players={players}\n          isHost={true} // 실제로는 플레이어 ID로 확인\n          onStartGame={handleStartGame}\n          onLeaveGame={handleLeaveGame}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n        />\n      ) : (\n        <PlayingScreen \n          currentRound={currentRound}\n          currentPhase={currentPhase}\n          phaseTimeLeft={phaseTimeLeft}\n          selectedLocation={selectedLocation}\n          onLocationSelect={handleLocationSelect}\n          players={players}\n          selectedAction={selectedAction}\n          targetPlayer={targetPlayer}\n          onTargetSelect={handleTargetSelect}\n          playerInfo={playerInfo}\n          onActionSelect={handleActionSelect}\n          onSubmitTurn={handleSubmitTurn}\n          gameStatus={gameState.gameStatus}\n          onLeaveGame={handleLeaveGame}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n          peekCount={peekCount}\n          maxPeekCount={maxPeekCount}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}