{"ast":null,"code":"import React,{useState,useRef,useEffect,useMemo,useContext}from'react';import'../styles/GameChat.css';import SocketContext from'../contexts/SocketContext';import{useParams}from'react-router-dom';import GameSocketService from'../services/GameSocketService';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const GameChat=_ref=>{var _socketService$isConn;let{messages,onSendMessage}=_ref;const[message,setMessage]=useState('');const messagesEndRef=useRef(null);const chatContainerRef=useRef(null);const{socket}=useContext(SocketContext);const[socketService,setSocketService]=useState(null);const{gameId}=useParams();// 메시지 수 제한 (최대 50개)\nconst MAX_MESSAGES=50;// 표시할 메시지 제한\nconst limitedMessages=useMemo(()=>{// 메시지가 MAX_MESSAGES를 초과하면 최신 메시지만 표시\nreturn messages.length>MAX_MESSAGES?messages.slice(messages.length-MAX_MESSAGES):messages;},[messages]);// 메시지 수 정보\nconst messageCountInfo=useMemo(()=>{if(messages.length<=MAX_MESSAGES)return null;return`${messages.length-MAX_MESSAGES}개의 이전 메시지가 숨겨져 있습니다.`;},[messages]);// 소켓 서비스 초기화 - 의존성 배열에서 socket만 사용하여 불필요한 재생성 방지\nuseEffect(()=>{if(socket){console.log('[GameChat] 소켓 서비스 초기화');const service=new GameSocketService(socket);setSocketService(service);// 새 메시지 이벤트 리스너\nconst handleNewMessage=message=>{console.log('[GameChat] 새 메시지 수신:',message);if(typeof onSendMessage==='function'){// 외부에서 메시지 처리하도록 콜백 호출\nonSendMessage(message.content,message);}};// 이벤트 리스너 등록\nservice.registerHandler('newMessage',handleNewMessage);service.registerHandler('game_message',handleNewMessage);return()=>{console.log('[GameChat] 이벤트 리스너 정리');service.removeHandler('newMessage');service.removeHandler('game_message');};}},[socket]);const handleMessageChange=e=>{setMessage(e.target.value);};const handleSubmit=e=>{e.preventDefault();if(!message.trim())return;console.log('[GameChat] 메시지 전송 시도:',message,gameId);// 소켓이 연결되어 있고 서비스가 초기화되었는지 확인\nif(socketService&&gameId){try{// 소켓을 통해 서버로 메시지 전송\nconst sent=socketService.sendMessage(gameId,message);console.log('[GameChat] 메시지 전송 결과:',sent);if(!sent){// 소켓이 연결되어 있지 않은 경우 사용자에게 알림\nconsole.error('[GameChat] 메시지 전송 실패: 서버 연결 없음');// 로컬 시스템 메시지 추가\nif(typeof onSendMessage==='function'){onSendMessage('서버 연결이 끊어져 메시지를 보낼 수 없습니다. 페이지를 새로고침해 보세요.',{id:Date.now().toString(),sender:'System',content:'서버 연결이 끊어져 메시지를 보낼 수 없습니다. 페이지를 새로고침해 보세요.',timestamp:new Date().toISOString(),isSystem:true});}}}catch(error){console.error('[GameChat] 메시지 전송 중 오류:',error);}}else{console.log('[GameChat] 로컬로 메시지 처리');}// 로컬 UI 업데이트를 위해 기존 콜백도 호출 (소켓 전송과 별개로)\nif(typeof onSendMessage==='function'){onSendMessage(message);}// 입력 필드 초기화\nsetMessage('');};// 새 메시지가 추가될 때마다 스크롤을 아래로 이동\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[limitedMessages]);// 수동 스크롤 함수\nconst scrollToBottom=()=>{var _messagesEndRef$curre2;(_messagesEndRef$curre2=messagesEndRef.current)===null||_messagesEndRef$curre2===void 0?void 0:_messagesEndRef$curre2.scrollIntoView({behavior:'smooth'});};// 스크롤 이벤트 처리\nuseEffect(()=>{const handleScroll=()=>{// 스크롤 위치에 따른 추가 로직을 구현할 수 있음\n};const chatContainer=chatContainerRef.current;if(chatContainer){chatContainer.addEventListener('scroll',handleScroll);return()=>chatContainer.removeEventListener('scroll',handleScroll);}},[]);// 연결 상태 확인\nconst isConnected=(_socketService$isConn=socketService===null||socketService===void 0?void 0:socketService.isConnected())!==null&&_socketService$isConn!==void 0?_socketService$isConn:false;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-chat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\uCC44\\uD305 \",isConnected?'(연결됨)':'(연결 끊김)']}),/*#__PURE__*/_jsx(\"button\",{className:\"scroll-bottom-button\",onClick:scrollToBottom,title:\"\\uC2A4\\uD06C\\uB864 \\uC544\\uB798\\uB85C\",children:\"\\u2193\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",ref:chatContainerRef,children:[messageCountInfo&&/*#__PURE__*/_jsx(\"div\",{className:\"message-count-info\",children:messageCountInfo}),limitedMessages.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\",children:\"\\uC544\\uC9C1 \\uBA54\\uC2DC\\uC9C0\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"}):limitedMessages.map(msg=>/*#__PURE__*/_jsxs(\"div\",{className:`chat-message ${msg.isSystem?'system-message':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"message-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"message-sender\",children:msg.sender||'알 수 없음'}),/*#__PURE__*/_jsx(\"span\",{className:\"message-time\",children:msg.timestamp?new Date(msg.timestamp).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}):new Date().toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:msg.content})]},msg.id||`msg-${Date.now()}-${Math.random()}`)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"chat-input-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:message,onChange:handleMessageChange,placeholder:isConnected?\"메시지를 입력하세요...\":\"연결 중...\",className:\"chat-input\",disabled:!isConnected}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"chat-send-button\",disabled:!isConnected,children:\"\\uC804\\uC1A1\"})]})]});};export default GameChat;","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","useContext","SocketContext","useParams","GameSocketService","jsxs","_jsxs","jsx","_jsx","GameChat","_ref","_socketService$isConn","messages","onSendMessage","message","setMessage","messagesEndRef","chatContainerRef","socket","socketService","setSocketService","gameId","MAX_MESSAGES","limitedMessages","length","slice","messageCountInfo","console","log","service","handleNewMessage","content","registerHandler","removeHandler","handleMessageChange","e","target","value","handleSubmit","preventDefault","trim","sent","sendMessage","error","id","Date","now","toString","sender","timestamp","toISOString","isSystem","_messagesEndRef$curre","current","scrollIntoView","behavior","scrollToBottom","_messagesEndRef$curre2","handleScroll","chatContainer","addEventListener","removeEventListener","isConnected","className","children","onClick","title","ref","map","msg","toLocaleTimeString","hour","minute","Math","random","onSubmit","type","onChange","placeholder","disabled"],"sources":["C:/Users/USER/Desktop/ssssss/frontend/src/components/GameChat.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useMemo, useContext } from 'react';\nimport '../styles/GameChat.css';\nimport SocketContext from '../contexts/SocketContext';\nimport { useParams } from 'react-router-dom';\nimport GameSocketService from '../services/GameSocketService';\n\nconst GameChat = ({ messages, onSendMessage }) => {\n  const [message, setMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  const { socket } = useContext(SocketContext);\n  const [socketService, setSocketService] = useState(null);\n  const { gameId } = useParams();\n  \n  // 메시지 수 제한 (최대 50개)\n  const MAX_MESSAGES = 50;\n  \n  // 표시할 메시지 제한\n  const limitedMessages = useMemo(() => {\n    // 메시지가 MAX_MESSAGES를 초과하면 최신 메시지만 표시\n    return messages.length > MAX_MESSAGES \n      ? messages.slice(messages.length - MAX_MESSAGES) \n      : messages;\n  }, [messages]);\n  \n  // 메시지 수 정보\n  const messageCountInfo = useMemo(() => {\n    if (messages.length <= MAX_MESSAGES) return null;\n    return `${messages.length - MAX_MESSAGES}개의 이전 메시지가 숨겨져 있습니다.`;\n  }, [messages]);\n\n  // 소켓 서비스 초기화 - 의존성 배열에서 socket만 사용하여 불필요한 재생성 방지\n  useEffect(() => {\n    if (socket) {\n      console.log('[GameChat] 소켓 서비스 초기화');\n      const service = new GameSocketService(socket);\n      setSocketService(service);\n      \n      // 새 메시지 이벤트 리스너\n      const handleNewMessage = (message) => {\n        console.log('[GameChat] 새 메시지 수신:', message);\n        if (typeof onSendMessage === 'function') {\n          // 외부에서 메시지 처리하도록 콜백 호출\n          onSendMessage(message.content, message);\n        }\n      };\n      \n      // 이벤트 리스너 등록\n      service.registerHandler('newMessage', handleNewMessage);\n      service.registerHandler('game_message', handleNewMessage);\n      \n      return () => {\n        console.log('[GameChat] 이벤트 리스너 정리');\n        service.removeHandler('newMessage');\n        service.removeHandler('game_message');\n      };\n    }\n  }, [socket]);\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n    \n    console.log('[GameChat] 메시지 전송 시도:', message, gameId);\n    \n    // 소켓이 연결되어 있고 서비스가 초기화되었는지 확인\n    if (socketService && gameId) {\n      try {\n        // 소켓을 통해 서버로 메시지 전송\n        const sent = socketService.sendMessage(gameId, message);\n        console.log('[GameChat] 메시지 전송 결과:', sent);\n        \n        if (!sent) {\n          // 소켓이 연결되어 있지 않은 경우 사용자에게 알림\n          console.error('[GameChat] 메시지 전송 실패: 서버 연결 없음');\n          \n          // 로컬 시스템 메시지 추가\n          if (typeof onSendMessage === 'function') {\n            onSendMessage('서버 연결이 끊어져 메시지를 보낼 수 없습니다. 페이지를 새로고침해 보세요.', {\n              id: Date.now().toString(),\n              sender: 'System',\n              content: '서버 연결이 끊어져 메시지를 보낼 수 없습니다. 페이지를 새로고침해 보세요.',\n              timestamp: new Date().toISOString(),\n              isSystem: true\n            });\n          }\n        }\n      } catch (error) {\n        console.error('[GameChat] 메시지 전송 중 오류:', error);\n      }\n    } else {\n      console.log('[GameChat] 로컬로 메시지 처리');\n    }\n    \n    // 로컬 UI 업데이트를 위해 기존 콜백도 호출 (소켓 전송과 별개로)\n    if (typeof onSendMessage === 'function') {\n      onSendMessage(message);\n    }\n    \n    // 입력 필드 초기화\n    setMessage('');\n  };\n\n  // 새 메시지가 추가될 때마다 스크롤을 아래로 이동\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [limitedMessages]);\n  \n  // 수동 스크롤 함수\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  // 스크롤 이벤트 처리\n  useEffect(() => {\n    const handleScroll = () => {\n      // 스크롤 위치에 따른 추가 로직을 구현할 수 있음\n    };\n    \n    const chatContainer = chatContainerRef.current;\n    if (chatContainer) {\n      chatContainer.addEventListener('scroll', handleScroll);\n      return () => chatContainer.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n\n  // 연결 상태 확인\n  const isConnected = socketService?.isConnected() ?? false;\n\n  return (\n    <div className=\"game-chat\">\n      <div className=\"chat-header\">\n        <h3>채팅 {isConnected ? '(연결됨)' : '(연결 끊김)'}</h3>\n        <button \n          className=\"scroll-bottom-button\" \n          onClick={scrollToBottom}\n          title=\"스크롤 아래로\"\n        >\n          ↓\n        </button>\n      </div>\n      \n      <div className=\"chat-messages\" ref={chatContainerRef}>\n        {messageCountInfo && (\n          <div className=\"message-count-info\">\n            {messageCountInfo}\n          </div>\n        )}\n        \n        {limitedMessages.length === 0 ? (\n          <div className=\"no-messages\">아직 메시지가 없습니다.</div>\n        ) : (\n          limitedMessages.map(msg => (\n            <div \n              key={msg.id || `msg-${Date.now()}-${Math.random()}`} \n              className={`chat-message ${msg.isSystem ? 'system-message' : ''}`}\n            >\n              <div className=\"message-header\">\n                <span className=\"message-sender\">{msg.sender || '알 수 없음'}</span>\n                <span className=\"message-time\">\n                  {msg.timestamp \n                    ? new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n                    : new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n                  }\n                </span>\n              </div>\n              <div className=\"message-content\">{msg.content}</div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      \n      <form className=\"chat-input-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={message}\n          onChange={handleMessageChange}\n          placeholder={isConnected ? \"메시지를 입력하세요...\" : \"연결 중...\"}\n          className=\"chat-input\"\n          disabled={!isConnected}\n        />\n        <button type=\"submit\" className=\"chat-send-button\" disabled={!isConnected}>\n          전송\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default GameChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}