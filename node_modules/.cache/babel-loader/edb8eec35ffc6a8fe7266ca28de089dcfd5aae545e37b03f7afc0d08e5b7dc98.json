{"ast":null,"code":"import React,{createContext,useState,useEffect,useCallback}from'react';import{io}from'socket.io-client';// 백엔드 URL 일관성 유지\nimport{jsx as _jsx}from\"react/jsx-runtime\";const BACKEND_URL='https://muksa-qian.onrender.com';// 소켓 컨텍스트 생성\nconst SocketContext=/*#__PURE__*/createContext({socket:null,isConnected:false,socketId:null,connect:()=>{},disconnect:()=>{},reconnect:()=>{},setSocket:()=>{}});// 소켓 프로바이더 컴포넌트\nexport const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocketState]=useState(null);const[isConnected,setIsConnected]=useState(false);const[socketId,setSocketId]=useState(null);// 소켓 초기 연결 설정\nuseEffect(()=>{// 소켓 객체 생성 및 연결\nconst socketInstance=io(BACKEND_URL,{withCredentials:true,transports:['websocket','polling'],reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000,timeout:20000});// 연결 이벤트 핸들러\nconst handleConnect=()=>{console.log('[Socket] 연결됨:',socketInstance.id);setIsConnected(true);setSocketId(socketInstance.id);};// 연결 오류 이벤트 핸들러\nconst handleConnectError=error=>{console.error('[Socket] 연결 오류:',error);setIsConnected(false);};// 연결 해제 이벤트 핸들러\nconst handleDisconnect=reason=>{console.log('[Socket] 연결 해제됨:',reason);setIsConnected(false);// 자동 재연결 시도 (원치 않는 연결 해제인 경우)\nif(reason==='io server disconnect'||reason==='transport close'){console.log('[Socket] 자동 재연결 시도...');setTimeout(()=>{socketInstance.connect();},2000);}};// 재연결 이벤트 핸들러\nconst handleReconnect=attemptNumber=>{console.log(`[Socket] 재연결 성공 (${attemptNumber}회 시도)`);setIsConnected(true);};// 소켓 이벤트 리스너 등록\nsocketInstance.on('connect',handleConnect);socketInstance.on('connect_error',handleConnectError);socketInstance.on('disconnect',handleDisconnect);socketInstance.on('reconnect',handleReconnect);// 소켓 객체 설정\nsetSocketState(socketInstance);// 컴포넌트 언마운트 시 소켓 정리\nreturn()=>{console.log('[Socket] 소켓 정리');socketInstance.off('connect',handleConnect);socketInstance.off('connect_error',handleConnectError);socketInstance.off('disconnect',handleDisconnect);socketInstance.off('reconnect',handleReconnect);socketInstance.disconnect();};},[]);// 소켓 수동 연결 함수\nconst connect=useCallback(()=>{if(socket&&!socket.connected){console.log('[Socket] 수동 연결 시도');socket.connect();}},[socket]);// 소켓 연결 해제 함수\nconst disconnect=useCallback(()=>{if(socket&&socket.connected){console.log('[Socket] 수동 연결 해제');socket.disconnect();}},[socket]);// 소켓 재연결 함수\nconst reconnect=useCallback(()=>{if(socket){console.log('[Socket] 수동 재연결 시도');socket.disconnect();setTimeout(()=>{socket.connect();},500);}},[socket]);// 소켓 설정 함수 (외부에서 호출)\nconst setSocket=useCallback(newSocket=>{if(socket&&socket!==newSocket){socket.disconnect();}setSocketState(newSocket);},[socket]);// 컨텍스트 값\nconst contextValue={socket,isConnected,socketId,connect,disconnect,reconnect,setSocket};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:contextValue,children:children});};export default SocketContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","io","jsx","_jsx","BACKEND_URL","SocketContext","socket","isConnected","socketId","connect","disconnect","reconnect","setSocket","SocketProvider","_ref","children","setSocketState","setIsConnected","setSocketId","socketInstance","withCredentials","transports","reconnection","reconnectionAttempts","reconnectionDelay","timeout","handleConnect","console","log","id","handleConnectError","error","handleDisconnect","reason","setTimeout","handleReconnect","attemptNumber","on","off","connected","newSocket","contextValue","Provider","value"],"sources":["C:/Users/USER/Desktop/ssssss/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { io } from 'socket.io-client';\n\n// 백엔드 URL 일관성 유지\nconst BACKEND_URL = 'https://muksa-qian.onrender.com';\n\n// 소켓 컨텍스트 생성\nconst SocketContext = createContext({\n  socket: null,\n  isConnected: false,\n  socketId: null,\n  connect: () => {},\n  disconnect: () => {},\n  reconnect: () => {},\n  setSocket: () => {}\n});\n\n// 소켓 프로바이더 컴포넌트\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocketState] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [socketId, setSocketId] = useState(null);\n  \n  // 소켓 초기 연결 설정\n  useEffect(() => {\n    // 소켓 객체 생성 및 연결\n    const socketInstance = io(BACKEND_URL, {\n      withCredentials: true,\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 20000\n    });\n\n    // 연결 이벤트 핸들러\n    const handleConnect = () => {\n      console.log('[Socket] 연결됨:', socketInstance.id);\n      setIsConnected(true);\n      setSocketId(socketInstance.id);\n    };\n\n    // 연결 오류 이벤트 핸들러\n    const handleConnectError = (error) => {\n      console.error('[Socket] 연결 오류:', error);\n      setIsConnected(false);\n    };\n\n    // 연결 해제 이벤트 핸들러\n    const handleDisconnect = (reason) => {\n      console.log('[Socket] 연결 해제됨:', reason);\n      setIsConnected(false);\n      \n      // 자동 재연결 시도 (원치 않는 연결 해제인 경우)\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        console.log('[Socket] 자동 재연결 시도...');\n        setTimeout(() => {\n          socketInstance.connect();\n        }, 2000);\n      }\n    };\n\n    // 재연결 이벤트 핸들러\n    const handleReconnect = (attemptNumber) => {\n      console.log(`[Socket] 재연결 성공 (${attemptNumber}회 시도)`);\n      setIsConnected(true);\n    };\n\n    // 소켓 이벤트 리스너 등록\n    socketInstance.on('connect', handleConnect);\n    socketInstance.on('connect_error', handleConnectError);\n    socketInstance.on('disconnect', handleDisconnect);\n    socketInstance.on('reconnect', handleReconnect);\n\n    // 소켓 객체 설정\n    setSocketState(socketInstance);\n\n    // 컴포넌트 언마운트 시 소켓 정리\n    return () => {\n      console.log('[Socket] 소켓 정리');\n      socketInstance.off('connect', handleConnect);\n      socketInstance.off('connect_error', handleConnectError);\n      socketInstance.off('disconnect', handleDisconnect);\n      socketInstance.off('reconnect', handleReconnect);\n      socketInstance.disconnect();\n    };\n  }, []);\n\n  // 소켓 수동 연결 함수\n  const connect = useCallback(() => {\n    if (socket && !socket.connected) {\n      console.log('[Socket] 수동 연결 시도');\n      socket.connect();\n    }\n  }, [socket]);\n\n  // 소켓 연결 해제 함수\n  const disconnect = useCallback(() => {\n    if (socket && socket.connected) {\n      console.log('[Socket] 수동 연결 해제');\n      socket.disconnect();\n    }\n  }, [socket]);\n\n  // 소켓 재연결 함수\n  const reconnect = useCallback(() => {\n    if (socket) {\n      console.log('[Socket] 수동 재연결 시도');\n      socket.disconnect();\n      setTimeout(() => {\n        socket.connect();\n      }, 500);\n    }\n  }, [socket]);\n\n  // 소켓 설정 함수 (외부에서 호출)\n  const setSocket = useCallback((newSocket) => {\n    if (socket && socket !== newSocket) {\n      socket.disconnect();\n    }\n    setSocketState(newSocket);\n  }, [socket]);\n\n  // 컨텍스트 값\n  const contextValue = {\n    socket,\n    isConnected,\n    socketId,\n    connect,\n    disconnect,\n    reconnect,\n    setSocket\n  };\n\n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport default SocketContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}