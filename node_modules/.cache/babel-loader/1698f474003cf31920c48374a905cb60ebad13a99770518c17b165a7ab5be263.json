{"ast":null,"code":"import React,{useState,useContext,useEffect,useCallback,useMemo,memo,useRef}from'react';import{useParams,useNavigate}from'react-router-dom';import GameContext from'../contexts/GameContext';import SocketContext from'../contexts/SocketContext';import GameBoard from'./GameBoard';import PlayerInfo from'./PlayerInfo';import GameChat from'./GameChat';import GameControls from'./GameControls';import'../styles/GameRoom.css';// 게임 단계 상수\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GAME_PHASES={ANIMAL_SELECTION:'animal_selection',PEEKING:'peeking',PRE_MOVE_GATHERING:'pre_move_gathering',MOVEMENT:'movement',DISCUSSION:'discussion'};// 각 단계별 제한 시간 (초)\nconst PHASE_TIMES={[GAME_PHASES.ANIMAL_SELECTION]:30,[GAME_PHASES.PEEKING]:30,[GAME_PHASES.PRE_MOVE_GATHERING]:60,[GAME_PHASES.MOVEMENT]:30,[GAME_PHASES.DISCUSSION]:120};// 로딩 컴포넌트를 별도로 분리하고 memo로 최적화\nconst LoadingScreen=/*#__PURE__*/memo(()=>/*#__PURE__*/_jsxs(\"div\",{className:\"game-room-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uAC8C\\uC784 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"})]}));// 게임 대기 화면 컴포넌트를 분리하여 최적화\nconst WaitingScreen=/*#__PURE__*/memo(_ref=>{let{players,isHost,onStartGame,onLeaveGame,messages,onSendMessage}=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-waiting\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"player-list card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uCC38\\uAC00\\uC790 \\uBAA9\\uB85D\"}),/*#__PURE__*/_jsx(\"ul\",{children:players.map(player=>/*#__PURE__*/_jsxs(\"li\",{className:player.isHost?'host':'',children:[player.name,\" \",player.isHost&&'(방장)',player.isReady&&/*#__PURE__*/_jsx(\"span\",{className:\"ready-badge\",children:\"\\uC900\\uBE44\\uC644\\uB8CC\"})]},player.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-actions card\",children:[isHost?/*#__PURE__*/_jsx(\"button\",{className:\"primary start-button\",onClick:onStartGame,disabled:players.length<3,children:\"\\uAC8C\\uC784 \\uC2DC\\uC791\"}):/*#__PURE__*/_jsx(\"button\",{className:\"primary ready-button\",children:\"\\uC900\\uBE44\\uD558\\uAE30\"}),/*#__PURE__*/_jsx(\"button\",{className:\"secondary\",onClick:onLeaveGame,children:\"\\uB098\\uAC00\\uAE30\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-chat-container card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uCC44\\uD305\"}),/*#__PURE__*/_jsx(GameChat,{messages:messages,onSendMessage:onSendMessage})]})]});});// 게임 플레이 화면 컴포넌트를 분리하여 최적화\nconst PlayingScreen=/*#__PURE__*/memo(_ref2=>{let{currentRound,currentPhase,phaseTimeLeft,selectedLocation,onLocationSelect,players,selectedAction,targetPlayer,onTargetSelect,playerInfo,onActionSelect,onSubmitTurn,gameStatus,onLeaveGame,messages,onSendMessage,peekCount,maxPeekCount}=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-playing\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-board-container\",children:/*#__PURE__*/_jsx(GameBoard,{currentRound:currentRound,currentPhase:currentPhase,selectedLocation:selectedLocation,onLocationSelect:onLocationSelect,players:players,selectedAction:selectedAction,targetPlayer:targetPlayer,onTargetSelect:onTargetSelect})}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-info-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`phase-timer ${currentPhase?currentPhase.replace('_','-'):''}`,children:[/*#__PURE__*/_jsx(\"h3\",{children:getPhaseDisplayName(currentPhase)}),/*#__PURE__*/_jsx(\"div\",{className:\"timer-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:`timer-progress ${phaseTimeLeft<10?'warning':''}`,style:{width:`${phaseTimeLeft/PHASE_TIMES[currentPhase]*100}%`}})}),/*#__PURE__*/_jsx(\"p\",{className:\"time-left\",children:formatTime(phaseTimeLeft)}),/*#__PURE__*/_jsxs(\"p\",{className:\"phase-description\",children:[currentPhase===GAME_PHASES.ANIMAL_SELECTION&&'30초 동안 자신의 동물을 확인하세요.',currentPhase===GAME_PHASES.PEEKING&&'다른 플레이어의 동물을 엿볼 수 있습니다.',currentPhase===GAME_PHASES.PRE_MOVE_GATHERING&&'모든 플레이어와 채팅할 수 있습니다.',currentPhase===GAME_PHASES.MOVEMENT&&'원하는 지역으로 이동하세요.',currentPhase===GAME_PHASES.DISCUSSION&&'같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.']})]}),/*#__PURE__*/_jsx(\"div\",{className:\"player-info-container\",children:/*#__PURE__*/_jsx(PlayerInfo,{player:playerInfo,currentRound:currentRound})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-controls-chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-controls-wrapper\",children:/*#__PURE__*/_jsx(GameControls,{currentRound:currentRound,currentPhase:currentPhase,selectedLocation:selectedLocation,selectedAction:selectedAction,targetPlayer:targetPlayer,onActionSelect:onActionSelect,onSubmitTurn:onSubmitTurn,gameStatus:gameStatus,onLeaveGame:onLeaveGame,peekCount:peekCount,maxPeekCount:maxPeekCount})}),/*#__PURE__*/_jsx(\"div\",{className:\"game-chat-wrapper\",children:/*#__PURE__*/_jsx(GameChat,{messages:messages,onSendMessage:onSendMessage})})]})]});});// 단계 이름을 한글로 표시하는 함수\nconst getPhaseDisplayName=phase=>{switch(phase){case GAME_PHASES.ANIMAL_SELECTION:return'동물 선택 단계';case GAME_PHASES.PEEKING:return'엿보기 단계';case GAME_PHASES.PRE_MOVE_GATHERING:return'이동 전 모임 단계';case GAME_PHASES.MOVEMENT:return'이동 단계';case GAME_PHASES.DISCUSSION:return'토론 단계';default:return'게임 진행 중';}};// 시간을 mm:ss 형식으로 포맷팅하는 함수\nconst formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return`${mins.toString().padStart(2,'0')}:${secs.toString().padStart(2,'0')}`;};const GameRoom=()=>{const{gameId}=useParams();const navigate=useNavigate();const{gameState,setGameState}=useContext(GameContext);const{socket}=useContext(SocketContext);const[isLoading,setIsLoading]=useState(true);const[gameStarted,setGameStarted]=useState(false);const[players,setPlayers]=useState([]);const[messages,setMessages]=useState([]);const[currentRound,setCurrentRound]=useState(0);const[currentPhase,setCurrentPhase]=useState(null);const[phaseTimeLeft,setPhaseTimeLeft]=useState(0);const[selectedLocation,setSelectedLocation]=useState(null);const[selectedAction,setSelectedAction]=useState(null);const[targetPlayer,setTargetPlayer]=useState(null);const[peekCount,setPeekCount]=useState(0);// 엿보기 사용 횟수\nconst[maxPeekCount,setMaxPeekCount]=useState(1);// 최대 엿보기 횟수 (기본값 1)\nconst[leftHabitat,setLeftHabitat]=useState(false);// 서식지를 떠났는지 여부\n// 메모이제이션된 플레이어 정보\nconst playerInfo=useMemo(()=>{return{name:gameState.playerName,animal:gameState.animal,location:selectedLocation,habitat:gameState.habitat||'숲',// 기본 서식지\ntier:gameState.tier||'Tier 5'// 기본 계층\n};},[gameState.playerName,gameState.animal,gameState.habitat,gameState.tier,selectedLocation]);// 시스템 메시지 추가 함수 최적화\nconst addSystemMessage=useCallback(content=>{const systemMessage={id:Date.now().toString(),sender:'System',content,timestamp:new Date().toISOString(),isSystem:true};setMessages(prev=>[...prev,systemMessage]);},[]);// 게임 단계 변경 함수\nconst changeGamePhase=useCallback(newPhase=>{console.log('게임 단계 변경:',newPhase);// 타이머 초기화 플래그 리셋 - 새 단계에서 타이머가 항상 초기화되도록 함\ntimerInitializedRef.current=false;// 상태 업데이트를 배치로 처리하여 리렌더링 최소화\nsetCurrentPhase(newPhase);setPhaseTimeLeft(PHASE_TIMES[newPhase]);// 단계별 초기화 및 메시지\nswitch(newPhase){case GAME_PHASES.ANIMAL_SELECTION:addSystemMessage('동물 선택 단계가 시작되었습니다. 30초 동안 자신의 동물을 확인하세요.');if(gameState.animal==='까마귀'){addSystemMessage('당신은 까마귀입니다. 누가 우승할지 예측하세요.');}else if(gameState.animal==='카멜레온'){addSystemMessage('당신은 카멜레온입니다. 어떤 동물로 변장할지 선택하세요.');}break;case GAME_PHASES.PEEKING:addSystemMessage('엿보기 단계가 시작되었습니다. 다른 플레이어의 동물을 확인할 수 있습니다.');// 특수 동물 능력 설정\nif(['까마귀','악어새','쥐'].includes(gameState.animal)){setMaxPeekCount(2);addSystemMessage(`당신은 ${gameState.animal}입니다. 2번 엿볼 수 있습니다.`);}else{setMaxPeekCount(1);}break;case GAME_PHASES.PRE_MOVE_GATHERING:addSystemMessage('이동 전 모임 단계가 시작되었습니다. 모든 플레이어와 채팅할 수 있습니다.');break;case GAME_PHASES.MOVEMENT:addSystemMessage('이동 단계가 시작되었습니다. 원하는 지역으로 이동하세요.');break;case GAME_PHASES.DISCUSSION:addSystemMessage('토론 단계가 시작되었습니다. 같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.');break;default:break;}},[addSystemMessage,gameState.animal]);// 타이머 ref 선언 - 컴포넌트 최상위 레벨에서 선언\nconst timerRef=useRef(null);const timerInitializedRef=useRef(false);// 타이머 효과 - 의존성 배열 최적화 및 타이머 중복 방지\nuseEffect(()=>{// 게임이 시작되지 않았거나 현재 단계가 없으면 타이머를 실행하지 않음\nif(!currentPhase||!gameStarted){console.log('타이머 조건 불충족: 게임 시작 =',gameStarted,'현재 단계 =',currentPhase);return;}console.log('타이머 설정: 단계 =',currentPhase,'시간 =',PHASE_TIMES[currentPhase]);// 이전 타이머가 있으면 정리\nif(timerRef.current){console.log('이전 타이머 정리');clearInterval(timerRef.current);timerRef.current=null;}// 항상 새 단계에서 타이머 시간 초기화\nconsole.log('타이머 초기화');setPhaseTimeLeft(PHASE_TIMES[currentPhase]);// 새 타이머 설정 (단일 인스턴스만 생성)\nconst timerId=setInterval(()=>{setPhaseTimeLeft(prev=>{const newTime=prev-1;if(newTime<=0){console.log('타이머 종료, 다음 단계로 진행');clearInterval(timerId);// 다음 단계로 자동 진행\nswitch(currentPhase){case GAME_PHASES.ANIMAL_SELECTION:changeGamePhase(GAME_PHASES.PEEKING);return PHASE_TIMES[GAME_PHASES.PEEKING];case GAME_PHASES.PEEKING:changeGamePhase(GAME_PHASES.PRE_MOVE_GATHERING);return PHASE_TIMES[GAME_PHASES.PRE_MOVE_GATHERING];case GAME_PHASES.PRE_MOVE_GATHERING:changeGamePhase(GAME_PHASES.MOVEMENT);return PHASE_TIMES[GAME_PHASES.MOVEMENT];case GAME_PHASES.MOVEMENT:changeGamePhase(GAME_PHASES.DISCUSSION);return PHASE_TIMES[GAME_PHASES.DISCUSSION];case GAME_PHASES.DISCUSSION:// 다음 라운드로 진행 또는 게임 종료\nif(currentRound<4){setCurrentRound(prev=>prev+1);changeGamePhase(GAME_PHASES.MOVEMENT);return PHASE_TIMES[GAME_PHASES.MOVEMENT];}else{// 게임 종료\naddSystemMessage('게임이 종료되었습니다!');// 승자 결정 (실제로는 서버에서 처리)\nconst winner=players[Math.floor(Math.random()*players.length)];addSystemMessage(`${winner.name}(${winner.animal})이(가) 승리했습니다!`);setGameState(prev=>({...prev,gameStatus:'finished'}));return 0;}default:return 0;}}return newTime;});},1000);// 타이머 ID 저장\ntimerRef.current=timerId;// 컴포넌트 언마운트 또는 의존성 변경 시 타이머 정리\nreturn()=>{if(timerRef.current){clearInterval(timerRef.current);timerRef.current=null;}};// 의존성 배열에 필요한 모든 의존성 포함\n},[currentPhase,gameStarted,currentRound,changeGamePhase,addSystemMessage,players]);// 게임 시작 핸들러 최적화\nconst handleStartGame=useCallback(()=>{// 각 플레이어에게 랜덤 동물 할당 (실제로는 서버에서 처리)\nconst animals=['사자','악어','독수리','하이에나','뱀','카멜레온','까마귀','악어새','사슴','수달','청둥오리','토끼','쥐'];const habitats=['강','하늘','들','숲'];const tiers=['Tier 1','Tier 2','Tier 3','Tier 4','Tier 5'];const updatedPlayers=players.map(player=>{const animal=animals[Math.floor(Math.random()*animals.length)];const habitat=habitats[Math.floor(Math.random()*habitats.length)];const tier=tiers[Math.floor(Math.random()*tiers.length)];return{...player,animal,habitat,tier};});// 모든 상태 업데이트를 한 번에 처리하여 리렌더링 최소화\nconst myPlayer=updatedPlayers.find(p=>p.id==='1');// 실제 구현에서는 소켓을 통해 게임 시작 요청을 보냅니다\nsetGameStarted(true);setCurrentRound(1);setPlayers(updatedPlayers);// 게임 상태 업데이트\nsetGameState(prev=>({...prev,players:updatedPlayers,currentRound:1,gameStatus:'playing',animal:myPlayer.animal,habitat:myPlayer.habitat,tier:myPlayer.tier}));// 시스템 메시지 추가\naddSystemMessage('게임이 시작되었습니다!');addSystemMessage(`당신의 동물은 ${myPlayer.animal}입니다.`);addSystemMessage(`당신의 서식지는 ${myPlayer.habitat}입니다.`);addSystemMessage(`당신의 계층은 ${myPlayer.tier}입니다.`);// 첫 번째 단계 시작\nchangeGamePhase(GAME_PHASES.ANIMAL_SELECTION);},[addSystemMessage,players,setGameState,changeGamePhase]);// 위치 선택 핸들러 최적화\nconst handleLocationSelect=useCallback(location=>{// 이동 제한 규칙 적용\nif(leftHabitat&&location!==playerInfo.habitat){addSystemMessage(`서식지를 한 번 떠난 후에는 반드시 서식지(${playerInfo.habitat})로만 이동해야 합니다.`);return;}// 이전 위치와 같은 위치를 선택한 경우 무시\nif(selectedLocation===location){return;}setSelectedLocation(location);// 서식지를 떠났는지 체크 및 상태 업데이트\nif(location!==playerInfo.habitat&&!leftHabitat){setLeftHabitat(true);addSystemMessage(`서식지(${playerInfo.habitat})를 떠났습니다. 이후에는 반드시 서식지로만 이동할 수 있습니다.`);}// 서식지로 돌아온 경우 특별 메시지\nif(location===playerInfo.habitat&&leftHabitat){addSystemMessage(`서식지(${playerInfo.habitat})로 돌아왔습니다.`);}else{addSystemMessage(`${location}(으)로 이동했습니다.`);}// 이동 정보를 게임 상태에 반영\nsetGameState(prev=>({...prev,location:location}));},[addSystemMessage,leftHabitat,playerInfo.habitat,selectedLocation,setGameState]);// 액션 선택 핸들러 최적화\nconst handleActionSelect=useCallback(action=>{// 현재 게임 단계에 따른 액션 제한\nif(action==='peek'&&currentPhase!==GAME_PHASES.PEEKING){addSystemMessage('엿보기는 엿보기 단계에서만 가능합니다.');return;}if(action==='peek'&&peekCount>=maxPeekCount){addSystemMessage(`엿보기를 이미 ${maxPeekCount}번 사용했습니다.`);return;}if(action==='move'&&currentPhase!==GAME_PHASES.MOVEMENT){addSystemMessage('이동은 이동 단계에서만 가능합니다.');return;}if(action==='attack'&&currentPhase!==GAME_PHASES.DISCUSSION){addSystemMessage('공격은 토론 단계에서만 가능합니다.');return;}// 상태 업데이트를 함수형으로 처리하여 최신 상태 보장\nsetSelectedAction(prevAction=>{// 같은 액션을 다시 선택한 경우 상태 변경 없음\nif(prevAction===action)return prevAction;// 이동 액션인 경우 위치 선택 초기화\nif(action==='move'){setSelectedLocation(null);}// 공격이나 엿보기 액션인 경우 타겟 플레이어 초기화\nif(action==='attack'||action==='peek'){setTargetPlayer(null);}return action;});},[addSystemMessage,currentPhase,peekCount,maxPeekCount]);// 타겟 선택 핸들러 최적화\nconst handleTargetSelect=useCallback(player=>{if(!player)return;// null 체크 추가\nsetTargetPlayer(prevTarget=>{// 같은 타겟을 다시 선택한 경우 상태 변경 없음\nif(prevTarget&&prevTarget.id===player.id)return prevTarget;// 엿보기 액션인 경우 엿보기 카운트 증가\nif(selectedAction==='peek'){setPeekCount(prev=>prev+1);// 엿본 플레이어의 동물 정보 표시\naddSystemMessage(`${player.name}의 동물은 ${player.animal}입니다.`);addSystemMessage(`${player.name}의 서식지는 ${player.habitat}입니다.`);}return player;});},[selectedAction,addSystemMessage]);// 턴 제출 핸들러 최적화\nconst handleSubmitTurn=useCallback(()=>{// 액션 유효성 검사\nif(!selectedAction){addSystemMessage('액션을 선택해주세요.');return;}// 액션별 추가 검증\nif(selectedAction==='move'&&!selectedLocation){addSystemMessage('이동할 위치를 선택해주세요.');return;}if((selectedAction==='attack'||selectedAction==='peek')&&!targetPlayer){addSystemMessage('대상 플레이어를 선택해주세요.');return;}// 액션 처리 (실제로는 서버에 전송)\nswitch(selectedAction){case'move':addSystemMessage(`${selectedLocation}(으)로 이동했습니다.`);break;case'attack':// 공격 성공 여부 랜덤 결정 (실제로는 서버에서 처리)\nconst isSuccess=Math.random()>0.3;if(isSuccess){addSystemMessage(`${targetPlayer.name}을(를) 공격했습니다!`);// 특수 동물 능력 처리 (예: 사슴)\nif(targetPlayer.animal==='사슴'){addSystemMessage(`${targetPlayer.name}은(는) 사슴입니다! 공격이 실패하고 당신이 피해를 입었습니다.`);}else{addSystemMessage(`${targetPlayer.name}에게 피해를 입혔습니다.`);}}else{addSystemMessage(`${targetPlayer.name}을(를) 공격했지만 실패했습니다.`);}break;case'peek':// 이미 handleTargetSelect에서 처리됨\nbreak;default:break;}// 액션 초기화\nsetSelectedAction(null);setTargetPlayer(null);},[selectedAction,selectedLocation,targetPlayer,addSystemMessage]);// 게임 나가기 핸들러\nconst handleLeaveGame=useCallback(()=>{// 실제 구현에서는 소켓을 통해 게임 나가기 요청을 보냅니다\nnavigate('/lobby');},[navigate]);// 메시지 전송 핸들러\nconst handleSendMessage=useCallback(content=>{const newMessage={id:Date.now().toString(),sender:gameState.playerName,content,timestamp:new Date().toISOString()};// 실제 구현에서는 소켓을 통해 메시지를 전송합니다\nsetMessages(prev=>[...prev,newMessage]);},[gameState.playerName]);// 컴포넌트 마운트 시 게임 정보 로드\nuseEffect(()=>{// 실제 구현에서는 소켓을 통해 게임 정보를 요청합니다\nsetTimeout(()=>{// 임시 데이터\nconst dummyPlayers=[{id:'1',name:gameState.playerName||'플레이어1',isHost:true,isReady:true},{id:'2',name:'플레이어2',isHost:false,isReady:true},{id:'3',name:'플레이어3',isHost:false,isReady:false}];setPlayers(dummyPlayers);setIsLoading(false);},1000);},[gameState.playerName]);// 로딩 중이면 로딩 화면 표시\nif(isLoading){return/*#__PURE__*/_jsx(LoadingScreen,{});}return/*#__PURE__*/_jsxs(\"div\",{className:\"game-room\",children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"game-room-title\",children:[\"\\uAC8C\\uC784 \\uBC29: \",gameId]}),!gameStarted?/*#__PURE__*/_jsx(WaitingScreen,{players:players,isHost:true// 실제로는 플레이어 ID로 확인\n,onStartGame:handleStartGame,onLeaveGame:handleLeaveGame,messages:messages,onSendMessage:handleSendMessage}):/*#__PURE__*/_jsx(PlayingScreen,{currentRound:currentRound,currentPhase:currentPhase,phaseTimeLeft:phaseTimeLeft,selectedLocation:selectedLocation,onLocationSelect:handleLocationSelect,players:players,selectedAction:selectedAction,targetPlayer:targetPlayer,onTargetSelect:handleTargetSelect,playerInfo:playerInfo,onActionSelect:handleActionSelect,onSubmitTurn:handleSubmitTurn,gameStatus:gameState.gameStatus,onLeaveGame:handleLeaveGame,messages:messages,onSendMessage:handleSendMessage,peekCount:peekCount,maxPeekCount:maxPeekCount})]});};export default GameRoom;","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","useMemo","memo","useRef","useParams","useNavigate","GameContext","SocketContext","GameBoard","PlayerInfo","GameChat","GameControls","jsx","_jsx","jsxs","_jsxs","GAME_PHASES","ANIMAL_SELECTION","PEEKING","PRE_MOVE_GATHERING","MOVEMENT","DISCUSSION","PHASE_TIMES","LoadingScreen","className","children","WaitingScreen","_ref","players","isHost","onStartGame","onLeaveGame","messages","onSendMessage","map","player","name","isReady","id","onClick","disabled","length","PlayingScreen","_ref2","currentRound","currentPhase","phaseTimeLeft","selectedLocation","onLocationSelect","selectedAction","targetPlayer","onTargetSelect","playerInfo","onActionSelect","onSubmitTurn","gameStatus","peekCount","maxPeekCount","replace","getPhaseDisplayName","style","width","formatTime","phase","seconds","mins","Math","floor","secs","toString","padStart","GameRoom","gameId","navigate","gameState","setGameState","socket","isLoading","setIsLoading","gameStarted","setGameStarted","setPlayers","setMessages","setCurrentRound","setCurrentPhase","setPhaseTimeLeft","setSelectedLocation","setSelectedAction","setTargetPlayer","setPeekCount","setMaxPeekCount","leftHabitat","setLeftHabitat","playerName","animal","location","habitat","tier","addSystemMessage","content","systemMessage","Date","now","sender","timestamp","toISOString","isSystem","prev","changeGamePhase","newPhase","console","log","timerInitializedRef","current","includes","timerRef","clearInterval","timerId","setInterval","newTime","winner","random","handleStartGame","animals","habitats","tiers","updatedPlayers","myPlayer","find","p","handleLocationSelect","handleActionSelect","action","prevAction","handleTargetSelect","prevTarget","handleSubmitTurn","isSuccess","handleLeaveGame","handleSendMessage","newMessage","setTimeout","dummyPlayers"],"sources":["C:/Users/USER/Desktop/ssssss/frontend/src/components/GameRoom.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useCallback, useMemo, memo, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport GameContext from '../contexts/GameContext';\nimport SocketContext from '../contexts/SocketContext';\nimport GameBoard from './GameBoard';\nimport PlayerInfo from './PlayerInfo';\nimport GameChat from './GameChat';\nimport GameControls from './GameControls';\nimport '../styles/GameRoom.css';\n\n// 게임 단계 상수\nconst GAME_PHASES = {\n  ANIMAL_SELECTION: 'animal_selection',\n  PEEKING: 'peeking',\n  PRE_MOVE_GATHERING: 'pre_move_gathering',\n  MOVEMENT: 'movement',\n  DISCUSSION: 'discussion'\n};\n\n// 각 단계별 제한 시간 (초)\nconst PHASE_TIMES = {\n  [GAME_PHASES.ANIMAL_SELECTION]: 30,\n  [GAME_PHASES.PEEKING]: 30,\n  [GAME_PHASES.PRE_MOVE_GATHERING]: 60,\n  [GAME_PHASES.MOVEMENT]: 30,\n  [GAME_PHASES.DISCUSSION]: 120\n};\n\n// 로딩 컴포넌트를 별도로 분리하고 memo로 최적화\nconst LoadingScreen = memo(() => (\n  <div className=\"game-room-loading\">\n    <div className=\"loading-spinner\"></div>\n    <p>게임 정보를 불러오는 중...</p>\n  </div>\n));\n\n// 게임 대기 화면 컴포넌트를 분리하여 최적화\nconst WaitingScreen = memo(({ \n  players, \n  isHost, \n  onStartGame, \n  onLeaveGame, \n  messages, \n  onSendMessage \n}) => (\n  <div className=\"game-waiting\">\n    <div className=\"player-list card\">\n      <h2>참가자 목록</h2>\n      <ul>\n        {players.map(player => (\n          <li key={player.id} className={player.isHost ? 'host' : ''}>\n            {player.name} {player.isHost && '(방장)'} \n            {player.isReady && <span className=\"ready-badge\">준비완료</span>}\n          </li>\n        ))}\n      </ul>\n    </div>\n    \n    <div className=\"game-actions card\">\n      {isHost ? (\n        <button \n          className=\"primary start-button\"\n          onClick={onStartGame}\n          disabled={players.length < 3}\n        >\n          게임 시작\n        </button>\n      ) : (\n        <button className=\"primary ready-button\">\n          준비하기\n        </button>\n      )}\n      <button className=\"secondary\" onClick={onLeaveGame}>\n        나가기\n      </button>\n    </div>\n    \n    <div className=\"game-chat-container card\">\n      <h2>채팅</h2>\n      <GameChat \n        messages={messages}\n        onSendMessage={onSendMessage}\n      />\n    </div>\n  </div>\n));\n\n// 게임 플레이 화면 컴포넌트를 분리하여 최적화\nconst PlayingScreen = memo(({ \n  currentRound,\n  currentPhase,\n  phaseTimeLeft,\n  selectedLocation,\n  onLocationSelect,\n  players,\n  selectedAction,\n  targetPlayer,\n  onTargetSelect,\n  playerInfo,\n  onActionSelect,\n  onSubmitTurn,\n  gameStatus,\n  onLeaveGame,\n  messages,\n  onSendMessage,\n  peekCount,\n  maxPeekCount\n}) => (\n  <div className=\"game-playing\">\n    {/* 게임 보드를 상단에 배치 */}\n    <div className=\"game-board-container\">\n      <GameBoard \n        currentRound={currentRound}\n        currentPhase={currentPhase}\n        selectedLocation={selectedLocation}\n        onLocationSelect={onLocationSelect}\n        players={players}\n        selectedAction={selectedAction}\n        targetPlayer={targetPlayer}\n        onTargetSelect={onTargetSelect}\n      />\n    </div>\n    \n    {/* 타이머와 플레이어 정보 */}\n    <div className=\"game-info-container\">\n      <div className={`phase-timer ${currentPhase ? currentPhase.replace('_', '-') : ''}`}>\n        <h3>{getPhaseDisplayName(currentPhase)}</h3>\n        <div className=\"timer-bar\">\n          <div \n            className={`timer-progress ${phaseTimeLeft < 10 ? 'warning' : ''}`}\n            style={{ width: `${(phaseTimeLeft / PHASE_TIMES[currentPhase]) * 100}%` }}\n          ></div>\n        </div>\n        <p className=\"time-left\">{formatTime(phaseTimeLeft)}</p>\n        <p className=\"phase-description\">\n          {currentPhase === GAME_PHASES.ANIMAL_SELECTION && '30초 동안 자신의 동물을 확인하세요.'}\n          {currentPhase === GAME_PHASES.PEEKING && '다른 플레이어의 동물을 엿볼 수 있습니다.'}\n          {currentPhase === GAME_PHASES.PRE_MOVE_GATHERING && '모든 플레이어와 채팅할 수 있습니다.'}\n          {currentPhase === GAME_PHASES.MOVEMENT && '원하는 지역으로 이동하세요.'}\n          {currentPhase === GAME_PHASES.DISCUSSION && '같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.'}\n        </p>\n      </div>\n      \n      {/* 플레이어 정보 컴포넌트 - key 제거하여 불필요한 리렌더링 방지 */}\n      <div className=\"player-info-container\">\n        <PlayerInfo \n          player={playerInfo}\n          currentRound={currentRound}\n        />\n      </div>\n    </div>\n    \n    {/* 게임 컨트롤과 채팅을 하단에 나란히 배치 */}\n    <div className=\"game-controls-chat-container\">\n      <div className=\"game-controls-wrapper\">\n        <GameControls \n          currentRound={currentRound}\n          currentPhase={currentPhase}\n          selectedLocation={selectedLocation}\n          selectedAction={selectedAction}\n          targetPlayer={targetPlayer}\n          onActionSelect={onActionSelect}\n          onSubmitTurn={onSubmitTurn}\n          gameStatus={gameStatus}\n          onLeaveGame={onLeaveGame}\n          peekCount={peekCount}\n          maxPeekCount={maxPeekCount}\n        />\n      </div>\n      \n      <div className=\"game-chat-wrapper\">\n        <GameChat \n          messages={messages}\n          onSendMessage={onSendMessage}\n        />\n      </div>\n    </div>\n  </div>\n));\n\n// 단계 이름을 한글로 표시하는 함수\nconst getPhaseDisplayName = (phase) => {\n  switch(phase) {\n    case GAME_PHASES.ANIMAL_SELECTION:\n      return '동물 선택 단계';\n    case GAME_PHASES.PEEKING:\n      return '엿보기 단계';\n    case GAME_PHASES.PRE_MOVE_GATHERING:\n      return '이동 전 모임 단계';\n    case GAME_PHASES.MOVEMENT:\n      return '이동 단계';\n    case GAME_PHASES.DISCUSSION:\n      return '토론 단계';\n    default:\n      return '게임 진행 중';\n  }\n};\n\n// 시간을 mm:ss 형식으로 포맷팅하는 함수\nconst formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n\nconst GameRoom = () => {\n  const { gameId } = useParams();\n  const navigate = useNavigate();\n  const { gameState, setGameState } = useContext(GameContext);\n  const { socket } = useContext(SocketContext);\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentRound, setCurrentRound] = useState(0);\n  const [currentPhase, setCurrentPhase] = useState(null);\n  const [phaseTimeLeft, setPhaseTimeLeft] = useState(0);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [selectedAction, setSelectedAction] = useState(null);\n  const [targetPlayer, setTargetPlayer] = useState(null);\n  const [peekCount, setPeekCount] = useState(0); // 엿보기 사용 횟수\n  const [maxPeekCount, setMaxPeekCount] = useState(1); // 최대 엿보기 횟수 (기본값 1)\n  const [leftHabitat, setLeftHabitat] = useState(false); // 서식지를 떠났는지 여부\n  \n  // 메모이제이션된 플레이어 정보\n  const playerInfo = useMemo(() => {\n    return {\n      name: gameState.playerName,\n      animal: gameState.animal,\n      location: selectedLocation,\n      habitat: gameState.habitat || '숲', // 기본 서식지\n      tier: gameState.tier || 'Tier 5' // 기본 계층\n    };\n  }, [gameState.playerName, gameState.animal, gameState.habitat, gameState.tier, selectedLocation]);\n\n  // 시스템 메시지 추가 함수 최적화\n  const addSystemMessage = useCallback((content) => {\n    const systemMessage = {\n      id: Date.now().toString(),\n      sender: 'System',\n      content,\n      timestamp: new Date().toISOString(),\n      isSystem: true\n    };\n    \n    setMessages(prev => [...prev, systemMessage]);\n  }, []);\n  \n  // 게임 단계 변경 함수\n  const changeGamePhase = useCallback((newPhase) => {\n    console.log('게임 단계 변경:', newPhase);\n    \n    // 타이머 초기화 플래그 리셋 - 새 단계에서 타이머가 항상 초기화되도록 함\n    timerInitializedRef.current = false;\n    \n    // 상태 업데이트를 배치로 처리하여 리렌더링 최소화\n    setCurrentPhase(newPhase);\n    setPhaseTimeLeft(PHASE_TIMES[newPhase]);\n    \n    // 단계별 초기화 및 메시지\n    switch(newPhase) {\n      case GAME_PHASES.ANIMAL_SELECTION:\n        addSystemMessage('동물 선택 단계가 시작되었습니다. 30초 동안 자신의 동물을 확인하세요.');\n        if (gameState.animal === '까마귀') {\n          addSystemMessage('당신은 까마귀입니다. 누가 우승할지 예측하세요.');\n        } else if (gameState.animal === '카멜레온') {\n          addSystemMessage('당신은 카멜레온입니다. 어떤 동물로 변장할지 선택하세요.');\n        }\n        break;\n      case GAME_PHASES.PEEKING:\n        addSystemMessage('엿보기 단계가 시작되었습니다. 다른 플레이어의 동물을 확인할 수 있습니다.');\n        // 특수 동물 능력 설정\n        if (['까마귀', '악어새', '쥐'].includes(gameState.animal)) {\n          setMaxPeekCount(2);\n          addSystemMessage(`당신은 ${gameState.animal}입니다. 2번 엿볼 수 있습니다.`);\n        } else {\n          setMaxPeekCount(1);\n        }\n        break;\n      case GAME_PHASES.PRE_MOVE_GATHERING:\n        addSystemMessage('이동 전 모임 단계가 시작되었습니다. 모든 플레이어와 채팅할 수 있습니다.');\n        break;\n      case GAME_PHASES.MOVEMENT:\n        addSystemMessage('이동 단계가 시작되었습니다. 원하는 지역으로 이동하세요.');\n        break;\n      case GAME_PHASES.DISCUSSION:\n        addSystemMessage('토론 단계가 시작되었습니다. 같은 지역에 있는 플레이어와 대화하고 공격할 수 있습니다.');\n        break;\n      default:\n        break;\n    }\n  }, [addSystemMessage, gameState.animal]);\n  \n  // 타이머 ref 선언 - 컴포넌트 최상위 레벨에서 선언\n  const timerRef = useRef(null);\n  const timerInitializedRef = useRef(false);\n  \n  // 타이머 효과 - 의존성 배열 최적화 및 타이머 중복 방지\n  useEffect(() => {\n    // 게임이 시작되지 않았거나 현재 단계가 없으면 타이머를 실행하지 않음\n    if (!currentPhase || !gameStarted) {\n      console.log('타이머 조건 불충족: 게임 시작 =', gameStarted, '현재 단계 =', currentPhase);\n      return;\n    }\n    \n    console.log('타이머 설정: 단계 =', currentPhase, '시간 =', PHASE_TIMES[currentPhase]);\n    \n    // 이전 타이머가 있으면 정리\n    if (timerRef.current) {\n      console.log('이전 타이머 정리');\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    \n    // 항상 새 단계에서 타이머 시간 초기화\n    console.log('타이머 초기화');\n    setPhaseTimeLeft(PHASE_TIMES[currentPhase]);\n    \n    // 새 타이머 설정 (단일 인스턴스만 생성)\n    const timerId = setInterval(() => {\n      setPhaseTimeLeft(prev => {\n        const newTime = prev - 1;\n        \n        if (newTime <= 0) {\n          console.log('타이머 종료, 다음 단계로 진행');\n          clearInterval(timerId);\n          \n          // 다음 단계로 자동 진행\n          switch(currentPhase) {\n            case GAME_PHASES.ANIMAL_SELECTION:\n              changeGamePhase(GAME_PHASES.PEEKING);\n              return PHASE_TIMES[GAME_PHASES.PEEKING];\n            case GAME_PHASES.PEEKING:\n              changeGamePhase(GAME_PHASES.PRE_MOVE_GATHERING);\n              return PHASE_TIMES[GAME_PHASES.PRE_MOVE_GATHERING];\n            case GAME_PHASES.PRE_MOVE_GATHERING:\n              changeGamePhase(GAME_PHASES.MOVEMENT);\n              return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n            case GAME_PHASES.MOVEMENT:\n              changeGamePhase(GAME_PHASES.DISCUSSION);\n              return PHASE_TIMES[GAME_PHASES.DISCUSSION];\n            case GAME_PHASES.DISCUSSION:\n              // 다음 라운드로 진행 또는 게임 종료\n              if (currentRound < 4) {\n                setCurrentRound(prev => prev + 1);\n                changeGamePhase(GAME_PHASES.MOVEMENT);\n                return PHASE_TIMES[GAME_PHASES.MOVEMENT];\n              } else {\n                // 게임 종료\n                addSystemMessage('게임이 종료되었습니다!');\n                // 승자 결정 (실제로는 서버에서 처리)\n                const winner = players[Math.floor(Math.random() * players.length)];\n                addSystemMessage(`${winner.name}(${winner.animal})이(가) 승리했습니다!`);\n                setGameState(prev => ({\n                  ...prev,\n                  gameStatus: 'finished'\n                }));\n                return 0;\n              }\n            default:\n              return 0;\n          }\n        }\n        return newTime;\n      });\n    }, 1000);\n    \n    // 타이머 ID 저장\n    timerRef.current = timerId;\n    \n    // 컴포넌트 언마운트 또는 의존성 변경 시 타이머 정리\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  // 의존성 배열에 필요한 모든 의존성 포함\n  }, [currentPhase, gameStarted, currentRound, changeGamePhase, addSystemMessage, players]);\n  \n  // 게임 시작 핸들러 최적화\n  const handleStartGame = useCallback(() => {\n    // 각 플레이어에게 랜덤 동물 할당 (실제로는 서버에서 처리)\n    const animals = ['사자', '악어', '독수리', '하이에나', '뱀', '카멜레온', '까마귀', '악어새', '사슴', '수달', '청둥오리', '토끼', '쥐'];\n    const habitats = ['강', '하늘', '들', '숲'];\n    const tiers = ['Tier 1', 'Tier 2', 'Tier 3', 'Tier 4', 'Tier 5'];\n    \n    const updatedPlayers = players.map(player => {\n      const animal = animals[Math.floor(Math.random() * animals.length)];\n      const habitat = habitats[Math.floor(Math.random() * habitats.length)];\n      const tier = tiers[Math.floor(Math.random() * tiers.length)];\n      \n      return {\n        ...player,\n        animal,\n        habitat,\n        tier\n      };\n    });\n    \n    // 모든 상태 업데이트를 한 번에 처리하여 리렌더링 최소화\n    const myPlayer = updatedPlayers.find(p => p.id === '1');\n    \n    // 실제 구현에서는 소켓을 통해 게임 시작 요청을 보냅니다\n    setGameStarted(true);\n    setCurrentRound(1);\n    setPlayers(updatedPlayers);\n    \n    // 게임 상태 업데이트\n    setGameState(prev => ({\n      ...prev,\n      players: updatedPlayers,\n      currentRound: 1,\n      gameStatus: 'playing',\n      animal: myPlayer.animal,\n      habitat: myPlayer.habitat,\n      tier: myPlayer.tier\n    }));\n    \n    // 시스템 메시지 추가\n    addSystemMessage('게임이 시작되었습니다!');\n    addSystemMessage(`당신의 동물은 ${myPlayer.animal}입니다.`);\n    addSystemMessage(`당신의 서식지는 ${myPlayer.habitat}입니다.`);\n    addSystemMessage(`당신의 계층은 ${myPlayer.tier}입니다.`);\n    \n    // 첫 번째 단계 시작\n    changeGamePhase(GAME_PHASES.ANIMAL_SELECTION);\n    \n  }, [addSystemMessage, players, setGameState, changeGamePhase]);\n  \n  // 위치 선택 핸들러 최적화\n  const handleLocationSelect = useCallback((location) => {\n    // 이동 제한 규칙 적용\n    if (leftHabitat && location !== playerInfo.habitat) {\n      addSystemMessage(`서식지를 한 번 떠난 후에는 반드시 서식지(${playerInfo.habitat})로만 이동해야 합니다.`);\n      return;\n    }\n    \n    // 이전 위치와 같은 위치를 선택한 경우 무시\n    if (selectedLocation === location) {\n      return;\n    }\n    \n    setSelectedLocation(location);\n    \n    // 서식지를 떠났는지 체크 및 상태 업데이트\n    if (location !== playerInfo.habitat && !leftHabitat) {\n      setLeftHabitat(true);\n      addSystemMessage(`서식지(${playerInfo.habitat})를 떠났습니다. 이후에는 반드시 서식지로만 이동할 수 있습니다.`);\n    }\n    \n    // 서식지로 돌아온 경우 특별 메시지\n    if (location === playerInfo.habitat && leftHabitat) {\n      addSystemMessage(`서식지(${playerInfo.habitat})로 돌아왔습니다.`);\n    } else {\n      addSystemMessage(`${location}(으)로 이동했습니다.`);\n    }\n    \n    // 이동 정보를 게임 상태에 반영\n    setGameState(prev => ({\n      ...prev,\n      location: location\n    }));\n  }, [addSystemMessage, leftHabitat, playerInfo.habitat, selectedLocation, setGameState]);\n  \n  // 액션 선택 핸들러 최적화\n  const handleActionSelect = useCallback((action) => {\n    // 현재 게임 단계에 따른 액션 제한\n    if (action === 'peek' && currentPhase !== GAME_PHASES.PEEKING) {\n      addSystemMessage('엿보기는 엿보기 단계에서만 가능합니다.');\n      return;\n    }\n    \n    if (action === 'peek' && peekCount >= maxPeekCount) {\n      addSystemMessage(`엿보기를 이미 ${maxPeekCount}번 사용했습니다.`);\n      return;\n    }\n    \n    if (action === 'move' && currentPhase !== GAME_PHASES.MOVEMENT) {\n      addSystemMessage('이동은 이동 단계에서만 가능합니다.');\n      return;\n    }\n    \n    if (action === 'attack' && currentPhase !== GAME_PHASES.DISCUSSION) {\n      addSystemMessage('공격은 토론 단계에서만 가능합니다.');\n      return;\n    }\n    \n    // 상태 업데이트를 함수형으로 처리하여 최신 상태 보장\n    setSelectedAction(prevAction => {\n      // 같은 액션을 다시 선택한 경우 상태 변경 없음\n      if (prevAction === action) return prevAction;\n      \n      // 이동 액션인 경우 위치 선택 초기화\n      if (action === 'move') {\n        setSelectedLocation(null);\n      }\n      \n      // 공격이나 엿보기 액션인 경우 타겟 플레이어 초기화\n      if (action === 'attack' || action === 'peek') {\n        setTargetPlayer(null);\n      }\n      \n      return action;\n    });\n  }, [addSystemMessage, currentPhase, peekCount, maxPeekCount]);\n  \n  // 타겟 선택 핸들러 최적화\n  const handleTargetSelect = useCallback((player) => {\n    if (!player) return; // null 체크 추가\n    \n    setTargetPlayer(prevTarget => {\n      // 같은 타겟을 다시 선택한 경우 상태 변경 없음\n      if (prevTarget && prevTarget.id === player.id) return prevTarget;\n      \n      // 엿보기 액션인 경우 엿보기 카운트 증가\n      if (selectedAction === 'peek') {\n        setPeekCount(prev => prev + 1);\n        \n        // 엿본 플레이어의 동물 정보 표시\n        addSystemMessage(`${player.name}의 동물은 ${player.animal}입니다.`);\n        addSystemMessage(`${player.name}의 서식지는 ${player.habitat}입니다.`);\n      }\n      \n      return player;\n    });\n  }, [selectedAction, addSystemMessage]);\n  \n  // 턴 제출 핸들러 최적화\n  const handleSubmitTurn = useCallback(() => {\n    // 액션 유효성 검사\n    if (!selectedAction) {\n      addSystemMessage('액션을 선택해주세요.');\n      return;\n    }\n    \n    // 액션별 추가 검증\n    if (selectedAction === 'move' && !selectedLocation) {\n      addSystemMessage('이동할 위치를 선택해주세요.');\n      return;\n    }\n    \n    if ((selectedAction === 'attack' || selectedAction === 'peek') && !targetPlayer) {\n      addSystemMessage('대상 플레이어를 선택해주세요.');\n      return;\n    }\n    \n    // 액션 처리 (실제로는 서버에 전송)\n    switch(selectedAction) {\n      case 'move':\n        addSystemMessage(`${selectedLocation}(으)로 이동했습니다.`);\n        break;\n      case 'attack':\n        // 공격 성공 여부 랜덤 결정 (실제로는 서버에서 처리)\n        const isSuccess = Math.random() > 0.3;\n        \n        if (isSuccess) {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했습니다!`);\n          // 특수 동물 능력 처리 (예: 사슴)\n          if (targetPlayer.animal === '사슴') {\n            addSystemMessage(`${targetPlayer.name}은(는) 사슴입니다! 공격이 실패하고 당신이 피해를 입었습니다.`);\n          } else {\n            addSystemMessage(`${targetPlayer.name}에게 피해를 입혔습니다.`);\n          }\n        } else {\n          addSystemMessage(`${targetPlayer.name}을(를) 공격했지만 실패했습니다.`);\n        }\n        break;\n      case 'peek':\n        // 이미 handleTargetSelect에서 처리됨\n        break;\n      default:\n        break;\n    }\n    \n    // 액션 초기화\n    setSelectedAction(null);\n    setTargetPlayer(null);\n  }, [selectedAction, selectedLocation, targetPlayer, addSystemMessage]);\n  \n  // 게임 나가기 핸들러\n  const handleLeaveGame = useCallback(() => {\n    // 실제 구현에서는 소켓을 통해 게임 나가기 요청을 보냅니다\n    navigate('/lobby');\n  }, [navigate]);\n  \n  // 메시지 전송 핸들러\n  const handleSendMessage = useCallback((content) => {\n    const newMessage = {\n      id: Date.now().toString(),\n      sender: gameState.playerName,\n      content,\n      timestamp: new Date().toISOString()\n    };\n    \n    // 실제 구현에서는 소켓을 통해 메시지를 전송합니다\n    setMessages(prev => [...prev, newMessage]);\n  }, [gameState.playerName]);\n  \n  // 컴포넌트 마운트 시 게임 정보 로드\n  useEffect(() => {\n    // 실제 구현에서는 소켓을 통해 게임 정보를 요청합니다\n    setTimeout(() => {\n      // 임시 데이터\n      const dummyPlayers = [\n        { id: '1', name: gameState.playerName || '플레이어1', isHost: true, isReady: true },\n        { id: '2', name: '플레이어2', isHost: false, isReady: true },\n        { id: '3', name: '플레이어3', isHost: false, isReady: false }\n      ];\n      \n      setPlayers(dummyPlayers);\n      setIsLoading(false);\n    }, 1000);\n  }, [gameState.playerName]);\n  \n  // 로딩 중이면 로딩 화면 표시\n  if (isLoading) {\n    return <LoadingScreen />;\n  }\n  \n  return (\n    <div className=\"game-room\">\n      <h1 className=\"game-room-title\">게임 방: {gameId}</h1>\n      \n      {!gameStarted ? (\n        <WaitingScreen \n          players={players}\n          isHost={true} // 실제로는 플레이어 ID로 확인\n          onStartGame={handleStartGame}\n          onLeaveGame={handleLeaveGame}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n        />\n      ) : (\n        <PlayingScreen \n          currentRound={currentRound}\n          currentPhase={currentPhase}\n          phaseTimeLeft={phaseTimeLeft}\n          selectedLocation={selectedLocation}\n          onLocationSelect={handleLocationSelect}\n          players={players}\n          selectedAction={selectedAction}\n          targetPlayer={targetPlayer}\n          onTargetSelect={handleTargetSelect}\n          playerInfo={playerInfo}\n          onActionSelect={handleActionSelect}\n          onSubmitTurn={handleSubmitTurn}\n          gameStatus={gameState.gameStatus}\n          onLeaveGame={handleLeaveGame}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n          peekCount={peekCount}\n          maxPeekCount={maxPeekCount}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}